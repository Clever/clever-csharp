/* 
 * Clever API
 *
 * The Clever API
 *
 * OpenAPI spec version: 1.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Section
    /// </summary>
    [DataContract]
    public partial class Section :  IEquatable<Section>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Grade
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GradeEnum
        {
            
            /// <summary>
            /// Enum _1 for "1"
            /// </summary>
            [EnumMember(Value = "1")]
            _1,
            
            /// <summary>
            /// Enum _2 for "2"
            /// </summary>
            [EnumMember(Value = "2")]
            _2,
            
            /// <summary>
            /// Enum _3 for "3"
            /// </summary>
            [EnumMember(Value = "3")]
            _3,
            
            /// <summary>
            /// Enum _4 for "4"
            /// </summary>
            [EnumMember(Value = "4")]
            _4,
            
            /// <summary>
            /// Enum _5 for "5"
            /// </summary>
            [EnumMember(Value = "5")]
            _5,
            
            /// <summary>
            /// Enum _6 for "6"
            /// </summary>
            [EnumMember(Value = "6")]
            _6,
            
            /// <summary>
            /// Enum _7 for "7"
            /// </summary>
            [EnumMember(Value = "7")]
            _7,
            
            /// <summary>
            /// Enum _8 for "8"
            /// </summary>
            [EnumMember(Value = "8")]
            _8,
            
            /// <summary>
            /// Enum _9 for "9"
            /// </summary>
            [EnumMember(Value = "9")]
            _9,
            
            /// <summary>
            /// Enum _10 for "10"
            /// </summary>
            [EnumMember(Value = "10")]
            _10,
            
            /// <summary>
            /// Enum _11 for "11"
            /// </summary>
            [EnumMember(Value = "11")]
            _11,
            
            /// <summary>
            /// Enum _12 for "12"
            /// </summary>
            [EnumMember(Value = "12")]
            _12,
            
            /// <summary>
            /// Enum PreKindergarten for "PreKindergarten"
            /// </summary>
            [EnumMember(Value = "PreKindergarten")]
            PreKindergarten,
            
            /// <summary>
            /// Enum Kindergarten for "Kindergarten"
            /// </summary>
            [EnumMember(Value = "Kindergarten")]
            Kindergarten,
            
            /// <summary>
            /// Enum PostGraduate for "PostGraduate"
            /// </summary>
            [EnumMember(Value = "PostGraduate")]
            PostGraduate,
            
            /// <summary>
            /// Enum Other for "Other"
            /// </summary>
            [EnumMember(Value = "Other")]
            Other
        }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SubjectEnum
        {
            
            /// <summary>
            /// Enum EnglishLanguagearts for "english/language arts"
            /// </summary>
            [EnumMember(Value = "english/language arts")]
            EnglishLanguagearts,
            
            /// <summary>
            /// Enum Math for "math"
            /// </summary>
            [EnumMember(Value = "math")]
            Math,
            
            /// <summary>
            /// Enum Science for "science"
            /// </summary>
            [EnumMember(Value = "science")]
            Science,
            
            /// <summary>
            /// Enum Socialstudies for "social studies"
            /// </summary>
            [EnumMember(Value = "social studies")]
            Socialstudies,
            
            /// <summary>
            /// Enum Language for "language"
            /// </summary>
            [EnumMember(Value = "language")]
            Language,
            
            /// <summary>
            /// Enum HomeroomAdvisory for "homeroom/advisory"
            /// </summary>
            [EnumMember(Value = "homeroom/advisory")]
            HomeroomAdvisory,
            
            /// <summary>
            /// Enum InterventionsOnlinelearning for "interventions/online learning"
            /// </summary>
            [EnumMember(Value = "interventions/online learning")]
            InterventionsOnlinelearning,
            
            /// <summary>
            /// Enum Technologyandengineering for "technology and engineering"
            /// </summary>
            [EnumMember(Value = "technology and engineering")]
            Technologyandengineering,
            
            /// <summary>
            /// Enum PEandhealth for "PE and health"
            /// </summary>
            [EnumMember(Value = "PE and health")]
            PEandhealth,
            
            /// <summary>
            /// Enum Artsandmusic for "arts and music"
            /// </summary>
            [EnumMember(Value = "arts and music")]
            Artsandmusic,
            
            /// <summary>
            /// Enum Other for "other"
            /// </summary>
            [EnumMember(Value = "other")]
            Other
        }

        /// <summary>
        /// Gets or Sets Grade
        /// </summary>
        [DataMember(Name="grade", EmitDefaultValue=false)]
        public GradeEnum? Grade { get; set; }
        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public SubjectEnum? Subject { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Section" /> class.
        /// </summary>
        /// <param name="CourseDescription">CourseDescription.</param>
        /// <param name="CourseName">CourseName.</param>
        /// <param name="CourseNumber">CourseNumber.</param>
        /// <param name="Created">Created.</param>
        /// <param name="District">District.</param>
        /// <param name="Grade">Grade.</param>
        /// <param name="Id">Id.</param>
        /// <param name="LastModified">LastModified.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Period">Period.</param>
        /// <param name="School">School.</param>
        /// <param name="SectionNumber">SectionNumber.</param>
        /// <param name="SisId">SisId.</param>
        /// <param name="Students">Students.</param>
        /// <param name="Subject">Subject.</param>
        /// <param name="Teacher">Teacher.</param>
        /// <param name="Teachers">Teachers.</param>
        /// <param name="Term">Term.</param>
        public Section(string CourseDescription = default(string), string CourseName = default(string), string CourseNumber = default(string), string Created = default(string), string District = default(string), GradeEnum? Grade = default(GradeEnum?), string Id = default(string), string LastModified = default(string), string Name = default(string), string Period = default(string), string School = default(string), string SectionNumber = default(string), string SisId = default(string), List<string> Students = default(List<string>), SubjectEnum? Subject = default(SubjectEnum?), string Teacher = default(string), List<string> Teachers = default(List<string>), Term Term = default(Term))
        {
            this.CourseDescription = CourseDescription;
            this.CourseName = CourseName;
            this.CourseNumber = CourseNumber;
            this.Created = Created;
            this.District = District;
            this.Grade = Grade;
            this.Id = Id;
            this.LastModified = LastModified;
            this.Name = Name;
            this.Period = Period;
            this.School = School;
            this.SectionNumber = SectionNumber;
            this.SisId = SisId;
            this.Students = Students;
            this.Subject = Subject;
            this.Teacher = Teacher;
            this.Teachers = Teachers;
            this.Term = Term;
        }
        
        /// <summary>
        /// Gets or Sets CourseDescription
        /// </summary>
        [DataMember(Name="course_description", EmitDefaultValue=false)]
        public string CourseDescription { get; set; }

        /// <summary>
        /// Gets or Sets CourseName
        /// </summary>
        [DataMember(Name="course_name", EmitDefaultValue=false)]
        public string CourseName { get; set; }

        /// <summary>
        /// Gets or Sets CourseNumber
        /// </summary>
        [DataMember(Name="course_number", EmitDefaultValue=false)]
        public string CourseNumber { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public string Created { get; set; }

        /// <summary>
        /// Gets or Sets District
        /// </summary>
        [DataMember(Name="district", EmitDefaultValue=false)]
        public string District { get; set; }


        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets LastModified
        /// </summary>
        [DataMember(Name="last_modified", EmitDefaultValue=false)]
        public string LastModified { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name="period", EmitDefaultValue=false)]
        public string Period { get; set; }

        /// <summary>
        /// Gets or Sets School
        /// </summary>
        [DataMember(Name="school", EmitDefaultValue=false)]
        public string School { get; set; }

        /// <summary>
        /// Gets or Sets SectionNumber
        /// </summary>
        [DataMember(Name="section_number", EmitDefaultValue=false)]
        public string SectionNumber { get; set; }

        /// <summary>
        /// Gets or Sets SisId
        /// </summary>
        [DataMember(Name="sis_id", EmitDefaultValue=false)]
        public string SisId { get; set; }

        /// <summary>
        /// Gets or Sets Students
        /// </summary>
        [DataMember(Name="students", EmitDefaultValue=false)]
        public List<string> Students { get; set; }


        /// <summary>
        /// Gets or Sets Teacher
        /// </summary>
        [DataMember(Name="teacher", EmitDefaultValue=false)]
        public string Teacher { get; set; }

        /// <summary>
        /// Gets or Sets Teachers
        /// </summary>
        [DataMember(Name="teachers", EmitDefaultValue=false)]
        public List<string> Teachers { get; set; }

        /// <summary>
        /// Gets or Sets Term
        /// </summary>
        [DataMember(Name="term", EmitDefaultValue=false)]
        public Term Term { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Section {\n");
            sb.Append("  CourseDescription: ").Append(CourseDescription).Append("\n");
            sb.Append("  CourseName: ").Append(CourseName).Append("\n");
            sb.Append("  CourseNumber: ").Append(CourseNumber).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  District: ").Append(District).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  School: ").Append(School).Append("\n");
            sb.Append("  SectionNumber: ").Append(SectionNumber).Append("\n");
            sb.Append("  SisId: ").Append(SisId).Append("\n");
            sb.Append("  Students: ").Append(Students).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Teacher: ").Append(Teacher).Append("\n");
            sb.Append("  Teachers: ").Append(Teachers).Append("\n");
            sb.Append("  Term: ").Append(Term).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Section);
        }

        /// <summary>
        /// Returns true if Section instances are equal
        /// </summary>
        /// <param name="other">Instance of Section to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Section other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CourseDescription == other.CourseDescription ||
                    this.CourseDescription != null &&
                    this.CourseDescription.Equals(other.CourseDescription)
                ) && 
                (
                    this.CourseName == other.CourseName ||
                    this.CourseName != null &&
                    this.CourseName.Equals(other.CourseName)
                ) && 
                (
                    this.CourseNumber == other.CourseNumber ||
                    this.CourseNumber != null &&
                    this.CourseNumber.Equals(other.CourseNumber)
                ) && 
                (
                    this.Created == other.Created ||
                    this.Created != null &&
                    this.Created.Equals(other.Created)
                ) && 
                (
                    this.District == other.District ||
                    this.District != null &&
                    this.District.Equals(other.District)
                ) && 
                (
                    this.Grade == other.Grade ||
                    this.Grade != null &&
                    this.Grade.Equals(other.Grade)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.LastModified == other.LastModified ||
                    this.LastModified != null &&
                    this.LastModified.Equals(other.LastModified)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Period == other.Period ||
                    this.Period != null &&
                    this.Period.Equals(other.Period)
                ) && 
                (
                    this.School == other.School ||
                    this.School != null &&
                    this.School.Equals(other.School)
                ) && 
                (
                    this.SectionNumber == other.SectionNumber ||
                    this.SectionNumber != null &&
                    this.SectionNumber.Equals(other.SectionNumber)
                ) && 
                (
                    this.SisId == other.SisId ||
                    this.SisId != null &&
                    this.SisId.Equals(other.SisId)
                ) && 
                (
                    this.Students == other.Students ||
                    this.Students != null &&
                    this.Students.SequenceEqual(other.Students)
                ) && 
                (
                    this.Subject == other.Subject ||
                    this.Subject != null &&
                    this.Subject.Equals(other.Subject)
                ) && 
                (
                    this.Teacher == other.Teacher ||
                    this.Teacher != null &&
                    this.Teacher.Equals(other.Teacher)
                ) && 
                (
                    this.Teachers == other.Teachers ||
                    this.Teachers != null &&
                    this.Teachers.SequenceEqual(other.Teachers)
                ) && 
                (
                    this.Term == other.Term ||
                    this.Term != null &&
                    this.Term.Equals(other.Term)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CourseDescription != null)
                    hash = hash * 59 + this.CourseDescription.GetHashCode();
                if (this.CourseName != null)
                    hash = hash * 59 + this.CourseName.GetHashCode();
                if (this.CourseNumber != null)
                    hash = hash * 59 + this.CourseNumber.GetHashCode();
                if (this.Created != null)
                    hash = hash * 59 + this.Created.GetHashCode();
                if (this.District != null)
                    hash = hash * 59 + this.District.GetHashCode();
                if (this.Grade != null)
                    hash = hash * 59 + this.Grade.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.LastModified != null)
                    hash = hash * 59 + this.LastModified.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Period != null)
                    hash = hash * 59 + this.Period.GetHashCode();
                if (this.School != null)
                    hash = hash * 59 + this.School.GetHashCode();
                if (this.SectionNumber != null)
                    hash = hash * 59 + this.SectionNumber.GetHashCode();
                if (this.SisId != null)
                    hash = hash * 59 + this.SisId.GetHashCode();
                if (this.Students != null)
                    hash = hash * 59 + this.Students.GetHashCode();
                if (this.Subject != null)
                    hash = hash * 59 + this.Subject.GetHashCode();
                if (this.Teacher != null)
                    hash = hash * 59 + this.Teacher.GetHashCode();
                if (this.Teachers != null)
                    hash = hash * 59 + this.Teachers.GetHashCode();
                if (this.Term != null)
                    hash = hash * 59 + this.Term.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
