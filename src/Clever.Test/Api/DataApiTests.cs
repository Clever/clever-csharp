/* 
 * Clever API
 *
 * The Clever API
 *
 * OpenAPI spec version: 1.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Clever.Client;
using Clever.Api;
using Clever.Model;

namespace Clever.Test
{
    /// <summary>
    ///  Class for testing DataApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DataApiTests
    {
        private DataApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DataApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DataApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DataApi
            //Assert.IsInstanceOfType(typeof(DataApi), instance, "instance is a DataApi");
        }

        
        /// <summary>
        /// Test GetContact
        /// </summary>
        [Test]
        public void GetContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetContact(id);
            //Assert.IsInstanceOf<StudentContactResponse> (response, "response is StudentContactResponse");
        }
        
        /// <summary>
        /// Test GetContacts
        /// </summary>
        [Test]
        public void GetContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetContacts(limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<StudentContactsResponse> (response, "response is StudentContactsResponse");
        }
        
        /// <summary>
        /// Test GetContactsForStudent
        /// </summary>
        [Test]
        public void GetContactsForStudentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //var response = instance.GetContactsForStudent(id, limit);
            //Assert.IsInstanceOf<StudentContactsByStudentResponse> (response, "response is StudentContactsByStudentResponse");
        }
        
        /// <summary>
        /// Test GetDistrict
        /// </summary>
        [Test]
        public void GetDistrictTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDistrict(id);
            //Assert.IsInstanceOf<DistrictResponse> (response, "response is DistrictResponse");
        }
        
        /// <summary>
        /// Test GetDistrictAdmin
        /// </summary>
        [Test]
        public void GetDistrictAdminTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDistrictAdmin(id);
            //Assert.IsInstanceOf<DistrictAdminResponse> (response, "response is DistrictAdminResponse");
        }
        
        /// <summary>
        /// Test GetDistrictAdmins
        /// </summary>
        [Test]
        public void GetDistrictAdminsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetDistrictAdmins(startingAfter, endingBefore);
            //Assert.IsInstanceOf<DistrictAdminsResponse> (response, "response is DistrictAdminsResponse");
        }
        
        /// <summary>
        /// Test GetDistrictForSchool
        /// </summary>
        [Test]
        public void GetDistrictForSchoolTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDistrictForSchool(id);
            //Assert.IsInstanceOf<DistrictResponse> (response, "response is DistrictResponse");
        }
        
        /// <summary>
        /// Test GetDistrictForSection
        /// </summary>
        [Test]
        public void GetDistrictForSectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDistrictForSection(id);
            //Assert.IsInstanceOf<DistrictResponse> (response, "response is DistrictResponse");
        }
        
        /// <summary>
        /// Test GetDistrictForStudent
        /// </summary>
        [Test]
        public void GetDistrictForStudentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDistrictForStudent(id);
            //Assert.IsInstanceOf<DistrictResponse> (response, "response is DistrictResponse");
        }
        
        /// <summary>
        /// Test GetDistrictForStudentContact
        /// </summary>
        [Test]
        public void GetDistrictForStudentContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDistrictForStudentContact(id);
            //Assert.IsInstanceOf<DistrictResponse> (response, "response is DistrictResponse");
        }
        
        /// <summary>
        /// Test GetDistrictForTeacher
        /// </summary>
        [Test]
        public void GetDistrictForTeacherTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDistrictForTeacher(id);
            //Assert.IsInstanceOf<DistrictResponse> (response, "response is DistrictResponse");
        }
        
        /// <summary>
        /// Test GetDistrictStatus
        /// </summary>
        [Test]
        public void GetDistrictStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetDistrictStatus(id);
            //Assert.IsInstanceOf<DistrictStatusResponses> (response, "response is DistrictStatusResponses");
        }
        
        /// <summary>
        /// Test GetDistricts
        /// </summary>
        [Test]
        public void GetDistrictsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetDistricts();
            //Assert.IsInstanceOf<DistrictsResponse> (response, "response is DistrictsResponse");
        }
        
        /// <summary>
        /// Test GetGradeLevelsForTeacher
        /// </summary>
        [Test]
        public void GetGradeLevelsForTeacherTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetGradeLevelsForTeacher(id);
            //Assert.IsInstanceOf<GradeLevelsResponse> (response, "response is GradeLevelsResponse");
        }
        
        /// <summary>
        /// Test GetSchool
        /// </summary>
        [Test]
        public void GetSchoolTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetSchool(id);
            //Assert.IsInstanceOf<SchoolResponse> (response, "response is SchoolResponse");
        }
        
        /// <summary>
        /// Test GetSchoolAdmin
        /// </summary>
        [Test]
        public void GetSchoolAdminTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetSchoolAdmin(id);
            //Assert.IsInstanceOf<SchoolAdminResponse> (response, "response is SchoolAdminResponse");
        }
        
        /// <summary>
        /// Test GetSchoolAdmins
        /// </summary>
        [Test]
        public void GetSchoolAdminsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetSchoolAdmins(limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<SchoolAdminsResponse> (response, "response is SchoolAdminsResponse");
        }
        
        /// <summary>
        /// Test GetSchoolForSection
        /// </summary>
        [Test]
        public void GetSchoolForSectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetSchoolForSection(id);
            //Assert.IsInstanceOf<SchoolResponse> (response, "response is SchoolResponse");
        }
        
        /// <summary>
        /// Test GetSchoolForStudent
        /// </summary>
        [Test]
        public void GetSchoolForStudentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetSchoolForStudent(id);
            //Assert.IsInstanceOf<SchoolResponse> (response, "response is SchoolResponse");
        }
        
        /// <summary>
        /// Test GetSchoolForTeacher
        /// </summary>
        [Test]
        public void GetSchoolForTeacherTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetSchoolForTeacher(id);
            //Assert.IsInstanceOf<SchoolResponse> (response, "response is SchoolResponse");
        }
        
        /// <summary>
        /// Test GetSchools
        /// </summary>
        [Test]
        public void GetSchoolsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetSchools(limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<SchoolsResponse> (response, "response is SchoolsResponse");
        }
        
        /// <summary>
        /// Test GetSchoolsForSchoolAdmin
        /// </summary>
        [Test]
        public void GetSchoolsForSchoolAdminTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetSchoolsForSchoolAdmin(id, limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<SchoolsResponse> (response, "response is SchoolsResponse");
        }
        
        /// <summary>
        /// Test GetSection
        /// </summary>
        [Test]
        public void GetSectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetSection(id);
            //Assert.IsInstanceOf<SectionResponse> (response, "response is SectionResponse");
        }
        
        /// <summary>
        /// Test GetSections
        /// </summary>
        [Test]
        public void GetSectionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetSections(limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<SectionsResponse> (response, "response is SectionsResponse");
        }
        
        /// <summary>
        /// Test GetSectionsForSchool
        /// </summary>
        [Test]
        public void GetSectionsForSchoolTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetSectionsForSchool(id, limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<SectionsResponse> (response, "response is SectionsResponse");
        }
        
        /// <summary>
        /// Test GetSectionsForStudent
        /// </summary>
        [Test]
        public void GetSectionsForStudentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetSectionsForStudent(id, limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<SectionsResponse> (response, "response is SectionsResponse");
        }
        
        /// <summary>
        /// Test GetSectionsForTeacher
        /// </summary>
        [Test]
        public void GetSectionsForTeacherTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetSectionsForTeacher(id, limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<SectionsResponse> (response, "response is SectionsResponse");
        }
        
        /// <summary>
        /// Test GetStudent
        /// </summary>
        [Test]
        public void GetStudentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetStudent(id);
            //Assert.IsInstanceOf<StudentResponse> (response, "response is StudentResponse");
        }
        
        /// <summary>
        /// Test GetStudentForContact
        /// </summary>
        [Test]
        public void GetStudentForContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetStudentForContact(id);
            //Assert.IsInstanceOf<StudentResponse> (response, "response is StudentResponse");
        }
        
        /// <summary>
        /// Test GetStudents
        /// </summary>
        [Test]
        public void GetStudentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetStudents(limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<StudentsResponse> (response, "response is StudentsResponse");
        }
        
        /// <summary>
        /// Test GetStudentsForSchool
        /// </summary>
        [Test]
        public void GetStudentsForSchoolTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetStudentsForSchool(id, limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<StudentsResponse> (response, "response is StudentsResponse");
        }
        
        /// <summary>
        /// Test GetStudentsForSection
        /// </summary>
        [Test]
        public void GetStudentsForSectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetStudentsForSection(id, limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<StudentsResponse> (response, "response is StudentsResponse");
        }
        
        /// <summary>
        /// Test GetStudentsForTeacher
        /// </summary>
        [Test]
        public void GetStudentsForTeacherTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetStudentsForTeacher(id, limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<StudentsResponse> (response, "response is StudentsResponse");
        }
        
        /// <summary>
        /// Test GetTeacher
        /// </summary>
        [Test]
        public void GetTeacherTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetTeacher(id);
            //Assert.IsInstanceOf<TeacherResponse> (response, "response is TeacherResponse");
        }
        
        /// <summary>
        /// Test GetTeacherForSection
        /// </summary>
        [Test]
        public void GetTeacherForSectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetTeacherForSection(id);
            //Assert.IsInstanceOf<TeacherResponse> (response, "response is TeacherResponse");
        }
        
        /// <summary>
        /// Test GetTeachers
        /// </summary>
        [Test]
        public void GetTeachersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetTeachers(limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<TeachersResponse> (response, "response is TeachersResponse");
        }
        
        /// <summary>
        /// Test GetTeachersForSchool
        /// </summary>
        [Test]
        public void GetTeachersForSchoolTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetTeachersForSchool(id, limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<TeachersResponse> (response, "response is TeachersResponse");
        }
        
        /// <summary>
        /// Test GetTeachersForSection
        /// </summary>
        [Test]
        public void GetTeachersForSectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetTeachersForSection(id, limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<TeachersResponse> (response, "response is TeachersResponse");
        }
        
        /// <summary>
        /// Test GetTeachersForStudent
        /// </summary>
        [Test]
        public void GetTeachersForStudentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //string startingAfter = null;
            //string endingBefore = null;
            //var response = instance.GetTeachersForStudent(id, limit, startingAfter, endingBefore);
            //Assert.IsInstanceOf<TeachersResponse> (response, "response is TeachersResponse");
        }
        
    }

}
