/* 
 * Clever API
 *
 * The Clever API
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Clever.Client;
using Clever.Model;

namespace Clever.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the specific event
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>EventResponse</returns>
        EventResponse GetEvent (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the specific event
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of EventResponse</returns>
        ApiResponse<EventResponse> GetEventWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of events
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="school"> (optional)</param>
        /// <param name="recordType"> (optional)</param>
        /// <returns>EventsResponse</returns>
        EventsResponse GetEvents (int? limit = null, string startingAfter = null, string endingBefore = null, string school = null, List<string> recordType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of events
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="school"> (optional)</param>
        /// <param name="recordType"> (optional)</param>
        /// <returns>ApiResponse of EventsResponse</returns>
        ApiResponse<EventsResponse> GetEventsWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null, string school = null, List<string> recordType = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the specific event
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of EventResponse</returns>
        System.Threading.Tasks.Task<EventResponse> GetEventAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the specific event
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (EventResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventResponse>> GetEventAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of events
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="school"> (optional)</param>
        /// <param name="recordType"> (optional)</param>
        /// <returns>Task of EventsResponse</returns>
        System.Threading.Tasks.Task<EventsResponse> GetEventsAsync (int? limit = null, string startingAfter = null, string endingBefore = null, string school = null, List<string> recordType = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of events
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="school"> (optional)</param>
        /// <param name="recordType"> (optional)</param>
        /// <returns>Task of ApiResponse (EventsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventsResponse>> GetEventsAsyncWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null, string school = null, List<string> recordType = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EventsApi : IEventsApi
    {
        private Clever.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Clever.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EventsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Clever.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Clever.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Returns the specific event
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>EventResponse</returns>
        public EventResponse GetEvent (string id)
        {
             ApiResponse<EventResponse> localVarResponse = GetEventWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the specific event
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of EventResponse</returns>
        public ApiResponse< EventResponse > GetEventWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EventsApi->GetEvent");

            var localVarPath = "/events/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EventResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventResponse)));
        }

        /// <summary>
        ///  Returns the specific event
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of EventResponse</returns>
        public async System.Threading.Tasks.Task<EventResponse> GetEventAsync (string id)
        {
             ApiResponse<EventResponse> localVarResponse = await GetEventAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the specific event
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (EventResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EventResponse>> GetEventAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EventsApi->GetEvent");

            var localVarPath = "/events/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EventResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventResponse)));
        }

        /// <summary>
        ///  Returns a list of events
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="school"> (optional)</param>
        /// <param name="recordType"> (optional)</param>
        /// <returns>EventsResponse</returns>
        public EventsResponse GetEvents (int? limit = null, string startingAfter = null, string endingBefore = null, string school = null, List<string> recordType = null)
        {
             ApiResponse<EventsResponse> localVarResponse = GetEventsWithHttpInfo(limit, startingAfter, endingBefore, school, recordType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of events
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="school"> (optional)</param>
        /// <param name="recordType"> (optional)</param>
        /// <returns>ApiResponse of EventsResponse</returns>
        public ApiResponse< EventsResponse > GetEventsWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null, string school = null, List<string> recordType = null)
        {

            var localVarPath = "/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter
            if (school != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "school", school)); // query parameter
            if (recordType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "record_type", recordType)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EventsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventsResponse)));
        }

        /// <summary>
        ///  Returns a list of events
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="school"> (optional)</param>
        /// <param name="recordType"> (optional)</param>
        /// <returns>Task of EventsResponse</returns>
        public async System.Threading.Tasks.Task<EventsResponse> GetEventsAsync (int? limit = null, string startingAfter = null, string endingBefore = null, string school = null, List<string> recordType = null)
        {
             ApiResponse<EventsResponse> localVarResponse = await GetEventsAsyncWithHttpInfo(limit, startingAfter, endingBefore, school, recordType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of events
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <param name="school"> (optional)</param>
        /// <param name="recordType"> (optional)</param>
        /// <returns>Task of ApiResponse (EventsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EventsResponse>> GetEventsAsyncWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null, string school = null, List<string> recordType = null)
        {

            var localVarPath = "/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "starting_after", startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "ending_before", endingBefore)); // query parameter
            if (school != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "school", school)); // query parameter
            if (recordType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "record_type", recordType)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EventsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventsResponse)));
        }

    }
}
