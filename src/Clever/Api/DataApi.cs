/* 
 * Clever API
 *
 * The Clever API
 *
 * OpenAPI spec version: 1.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Clever.Client;
using Clever.Model;

namespace Clever.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific student contact
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>StudentContactResponse</returns>
        StudentContactResponse GetContact (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific student contact
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of StudentContactResponse</returns>
        ApiResponse<StudentContactResponse> GetContactWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of student contacts
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>StudentContactsResponse</returns>
        StudentContactsResponse GetContacts (int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of student contacts
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of StudentContactsResponse</returns>
        ApiResponse<StudentContactsResponse> GetContactsWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the contacts for a student
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <returns>StudentContactsByStudentResponse</returns>
        StudentContactsByStudentResponse GetContactsForStudent (string id, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the contacts for a student
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of StudentContactsByStudentResponse</returns>
        ApiResponse<StudentContactsByStudentResponse> GetContactsForStudentWithHttpInfo (string id, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific district
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DistrictResponse</returns>
        DistrictResponse GetDistrict (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific district
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DistrictResponse</returns>
        ApiResponse<DistrictResponse> GetDistrictWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific district admin
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DistrictAdminResponse</returns>
        DistrictAdminResponse GetDistrictAdmin (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific district admin
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DistrictAdminResponse</returns>
        ApiResponse<DistrictAdminResponse> GetDistrictAdminWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of district admins
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>DistrictAdminsResponse</returns>
        DistrictAdminsResponse GetDistrictAdmins (string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of district admins
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of DistrictAdminsResponse</returns>
        ApiResponse<DistrictAdminsResponse> GetDistrictAdminsWithHttpInfo (string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DistrictResponse</returns>
        DistrictResponse GetDistrictForSchool (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DistrictResponse</returns>
        ApiResponse<DistrictResponse> GetDistrictForSchoolWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DistrictResponse</returns>
        DistrictResponse GetDistrictForSection (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DistrictResponse</returns>
        ApiResponse<DistrictResponse> GetDistrictForSectionWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a student
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DistrictResponse</returns>
        DistrictResponse GetDistrictForStudent (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a student
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DistrictResponse</returns>
        ApiResponse<DistrictResponse> GetDistrictForStudentWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a student contact
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DistrictResponse</returns>
        DistrictResponse GetDistrictForStudentContact (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a student contact
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DistrictResponse</returns>
        ApiResponse<DistrictResponse> GetDistrictForStudentContactWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a teacher
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DistrictResponse</returns>
        DistrictResponse GetDistrictForTeacher (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a teacher
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DistrictResponse</returns>
        ApiResponse<DistrictResponse> GetDistrictForTeacherWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the status of the district
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DistrictStatusResponses</returns>
        DistrictStatusResponses GetDistrictStatus (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the status of the district
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DistrictStatusResponses</returns>
        ApiResponse<DistrictStatusResponses> GetDistrictStatusWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of districts
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DistrictsResponse</returns>
        DistrictsResponse GetDistricts ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of districts
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DistrictsResponse</returns>
        ApiResponse<DistrictsResponse> GetDistrictsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the grade levels for sections a teacher teaches
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>GradeLevelsResponse</returns>
        GradeLevelsResponse GetGradeLevelsForTeacher (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the grade levels for sections a teacher teaches
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of GradeLevelsResponse</returns>
        ApiResponse<GradeLevelsResponse> GetGradeLevelsForTeacherWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SchoolResponse</returns>
        SchoolResponse GetSchool (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SchoolResponse</returns>
        ApiResponse<SchoolResponse> GetSchoolWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific school admin
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SchoolAdminResponse</returns>
        SchoolAdminResponse GetSchoolAdmin (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific school admin
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SchoolAdminResponse</returns>
        ApiResponse<SchoolAdminResponse> GetSchoolAdminWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of school admins
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>SchoolAdminsResponse</returns>
        SchoolAdminsResponse GetSchoolAdmins (int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of school admins
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of SchoolAdminsResponse</returns>
        ApiResponse<SchoolAdminsResponse> GetSchoolAdminsWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the school for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SchoolResponse</returns>
        SchoolResponse GetSchoolForSection (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the school for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SchoolResponse</returns>
        ApiResponse<SchoolResponse> GetSchoolForSectionWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the primary school for a student
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SchoolResponse</returns>
        SchoolResponse GetSchoolForStudent (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the primary school for a student
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SchoolResponse</returns>
        ApiResponse<SchoolResponse> GetSchoolForStudentWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves school info for a teacher.
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SchoolResponse</returns>
        SchoolResponse GetSchoolForTeacher (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves school info for a teacher.
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SchoolResponse</returns>
        ApiResponse<SchoolResponse> GetSchoolForTeacherWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of schools
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>SchoolsResponse</returns>
        SchoolsResponse GetSchools (int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of schools
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of SchoolsResponse</returns>
        ApiResponse<SchoolsResponse> GetSchoolsWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the schools for a school admin
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>SchoolsResponse</returns>
        SchoolsResponse GetSchoolsForSchoolAdmin (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the schools for a school admin
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of SchoolsResponse</returns>
        ApiResponse<SchoolsResponse> GetSchoolsForSchoolAdminWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SectionResponse</returns>
        SectionResponse GetSection (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SectionResponse</returns>
        ApiResponse<SectionResponse> GetSectionWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of sections
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>SectionsResponse</returns>
        SectionsResponse GetSections (int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of sections
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of SectionsResponse</returns>
        ApiResponse<SectionsResponse> GetSectionsWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the sections for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>SectionsResponse</returns>
        SectionsResponse GetSectionsForSchool (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the sections for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of SectionsResponse</returns>
        ApiResponse<SectionsResponse> GetSectionsForSchoolWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the sections for a student
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>SectionsResponse</returns>
        SectionsResponse GetSectionsForStudent (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the sections for a student
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of SectionsResponse</returns>
        ApiResponse<SectionsResponse> GetSectionsForStudentWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the sections for a teacher
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>SectionsResponse</returns>
        SectionsResponse GetSectionsForTeacher (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the sections for a teacher
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of SectionsResponse</returns>
        ApiResponse<SectionsResponse> GetSectionsForTeacherWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific student
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>StudentResponse</returns>
        StudentResponse GetStudent (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific student
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of StudentResponse</returns>
        ApiResponse<StudentResponse> GetStudentWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the student for a student contact
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>StudentResponse</returns>
        StudentResponse GetStudentForContact (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the student for a student contact
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of StudentResponse</returns>
        ApiResponse<StudentResponse> GetStudentForContactWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of students
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>StudentsResponse</returns>
        StudentsResponse GetStudents (int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of students
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of StudentsResponse</returns>
        ApiResponse<StudentsResponse> GetStudentsWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the students for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>StudentsResponse</returns>
        StudentsResponse GetStudentsForSchool (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the students for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of StudentsResponse</returns>
        ApiResponse<StudentsResponse> GetStudentsForSchoolWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the students for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>StudentsResponse</returns>
        StudentsResponse GetStudentsForSection (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the students for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of StudentsResponse</returns>
        ApiResponse<StudentsResponse> GetStudentsForSectionWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the students for a teacher
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>StudentsResponse</returns>
        StudentsResponse GetStudentsForTeacher (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the students for a teacher
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of StudentsResponse</returns>
        ApiResponse<StudentsResponse> GetStudentsForTeacherWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific teacher
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>TeacherResponse</returns>
        TeacherResponse GetTeacher (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific teacher
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of TeacherResponse</returns>
        ApiResponse<TeacherResponse> GetTeacherWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the primary teacher for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>TeacherResponse</returns>
        TeacherResponse GetTeacherForSection (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the primary teacher for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of TeacherResponse</returns>
        ApiResponse<TeacherResponse> GetTeacherForSectionWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of teachers
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>TeachersResponse</returns>
        TeachersResponse GetTeachers (int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of teachers
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of TeachersResponse</returns>
        ApiResponse<TeachersResponse> GetTeachersWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the teachers for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>TeachersResponse</returns>
        TeachersResponse GetTeachersForSchool (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the teachers for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of TeachersResponse</returns>
        ApiResponse<TeachersResponse> GetTeachersForSchoolWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the teachers for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>TeachersResponse</returns>
        TeachersResponse GetTeachersForSection (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the teachers for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of TeachersResponse</returns>
        ApiResponse<TeachersResponse> GetTeachersForSectionWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the teachers for a student
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>TeachersResponse</returns>
        TeachersResponse GetTeachersForStudent (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the teachers for a student
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of TeachersResponse</returns>
        ApiResponse<TeachersResponse> GetTeachersForStudentWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific student contact
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of StudentContactResponse</returns>
        System.Threading.Tasks.Task<StudentContactResponse> GetContactAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific student contact
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (StudentContactResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StudentContactResponse>> GetContactAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of student contacts
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of StudentContactsResponse</returns>
        System.Threading.Tasks.Task<StudentContactsResponse> GetContactsAsync (int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of student contacts
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (StudentContactsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StudentContactsResponse>> GetContactsAsyncWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the contacts for a student
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of StudentContactsByStudentResponse</returns>
        System.Threading.Tasks.Task<StudentContactsByStudentResponse> GetContactsForStudentAsync (string id, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the contacts for a student
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (StudentContactsByStudentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StudentContactsByStudentResponse>> GetContactsForStudentAsyncWithHttpInfo (string id, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific district
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DistrictResponse</returns>
        System.Threading.Tasks.Task<DistrictResponse> GetDistrictAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific district
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DistrictResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistrictResponse>> GetDistrictAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific district admin
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DistrictAdminResponse</returns>
        System.Threading.Tasks.Task<DistrictAdminResponse> GetDistrictAdminAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific district admin
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DistrictAdminResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistrictAdminResponse>> GetDistrictAdminAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of district admins
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of DistrictAdminsResponse</returns>
        System.Threading.Tasks.Task<DistrictAdminsResponse> GetDistrictAdminsAsync (string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of district admins
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (DistrictAdminsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistrictAdminsResponse>> GetDistrictAdminsAsyncWithHttpInfo (string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DistrictResponse</returns>
        System.Threading.Tasks.Task<DistrictResponse> GetDistrictForSchoolAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DistrictResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistrictResponse>> GetDistrictForSchoolAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DistrictResponse</returns>
        System.Threading.Tasks.Task<DistrictResponse> GetDistrictForSectionAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DistrictResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistrictResponse>> GetDistrictForSectionAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a student
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DistrictResponse</returns>
        System.Threading.Tasks.Task<DistrictResponse> GetDistrictForStudentAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a student
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DistrictResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistrictResponse>> GetDistrictForStudentAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a student contact
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DistrictResponse</returns>
        System.Threading.Tasks.Task<DistrictResponse> GetDistrictForStudentContactAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a student contact
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DistrictResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistrictResponse>> GetDistrictForStudentContactAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a teacher
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DistrictResponse</returns>
        System.Threading.Tasks.Task<DistrictResponse> GetDistrictForTeacherAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the district for a teacher
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DistrictResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistrictResponse>> GetDistrictForTeacherAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the status of the district
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DistrictStatusResponses</returns>
        System.Threading.Tasks.Task<DistrictStatusResponses> GetDistrictStatusAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the status of the district
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DistrictStatusResponses)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistrictStatusResponses>> GetDistrictStatusAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of districts
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of DistrictsResponse</returns>
        System.Threading.Tasks.Task<DistrictsResponse> GetDistrictsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of districts
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (DistrictsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DistrictsResponse>> GetDistrictsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the grade levels for sections a teacher teaches
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of GradeLevelsResponse</returns>
        System.Threading.Tasks.Task<GradeLevelsResponse> GetGradeLevelsForTeacherAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the grade levels for sections a teacher teaches
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (GradeLevelsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GradeLevelsResponse>> GetGradeLevelsForTeacherAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SchoolResponse</returns>
        System.Threading.Tasks.Task<SchoolResponse> GetSchoolAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SchoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchoolResponse>> GetSchoolAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific school admin
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SchoolAdminResponse</returns>
        System.Threading.Tasks.Task<SchoolAdminResponse> GetSchoolAdminAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific school admin
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SchoolAdminResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchoolAdminResponse>> GetSchoolAdminAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of school admins
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of SchoolAdminsResponse</returns>
        System.Threading.Tasks.Task<SchoolAdminsResponse> GetSchoolAdminsAsync (int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of school admins
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (SchoolAdminsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchoolAdminsResponse>> GetSchoolAdminsAsyncWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the school for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SchoolResponse</returns>
        System.Threading.Tasks.Task<SchoolResponse> GetSchoolForSectionAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the school for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SchoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchoolResponse>> GetSchoolForSectionAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the primary school for a student
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SchoolResponse</returns>
        System.Threading.Tasks.Task<SchoolResponse> GetSchoolForStudentAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the primary school for a student
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SchoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchoolResponse>> GetSchoolForStudentAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves school info for a teacher.
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SchoolResponse</returns>
        System.Threading.Tasks.Task<SchoolResponse> GetSchoolForTeacherAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves school info for a teacher.
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SchoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchoolResponse>> GetSchoolForTeacherAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of schools
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of SchoolsResponse</returns>
        System.Threading.Tasks.Task<SchoolsResponse> GetSchoolsAsync (int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of schools
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (SchoolsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchoolsResponse>> GetSchoolsAsyncWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the schools for a school admin
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of SchoolsResponse</returns>
        System.Threading.Tasks.Task<SchoolsResponse> GetSchoolsForSchoolAdminAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the schools for a school admin
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (SchoolsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchoolsResponse>> GetSchoolsForSchoolAdminAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SectionResponse</returns>
        System.Threading.Tasks.Task<SectionResponse> GetSectionAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SectionResponse>> GetSectionAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of sections
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of SectionsResponse</returns>
        System.Threading.Tasks.Task<SectionsResponse> GetSectionsAsync (int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of sections
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (SectionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SectionsResponse>> GetSectionsAsyncWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the sections for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of SectionsResponse</returns>
        System.Threading.Tasks.Task<SectionsResponse> GetSectionsForSchoolAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the sections for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (SectionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SectionsResponse>> GetSectionsForSchoolAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the sections for a student
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of SectionsResponse</returns>
        System.Threading.Tasks.Task<SectionsResponse> GetSectionsForStudentAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the sections for a student
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (SectionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SectionsResponse>> GetSectionsForStudentAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the sections for a teacher
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of SectionsResponse</returns>
        System.Threading.Tasks.Task<SectionsResponse> GetSectionsForTeacherAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the sections for a teacher
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (SectionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SectionsResponse>> GetSectionsForTeacherAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific student
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of StudentResponse</returns>
        System.Threading.Tasks.Task<StudentResponse> GetStudentAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific student
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (StudentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StudentResponse>> GetStudentAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the student for a student contact
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of StudentResponse</returns>
        System.Threading.Tasks.Task<StudentResponse> GetStudentForContactAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the student for a student contact
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (StudentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StudentResponse>> GetStudentForContactAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of students
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of StudentsResponse</returns>
        System.Threading.Tasks.Task<StudentsResponse> GetStudentsAsync (int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of students
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (StudentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StudentsResponse>> GetStudentsAsyncWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the students for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of StudentsResponse</returns>
        System.Threading.Tasks.Task<StudentsResponse> GetStudentsForSchoolAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the students for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (StudentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StudentsResponse>> GetStudentsForSchoolAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the students for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of StudentsResponse</returns>
        System.Threading.Tasks.Task<StudentsResponse> GetStudentsForSectionAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the students for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (StudentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StudentsResponse>> GetStudentsForSectionAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the students for a teacher
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of StudentsResponse</returns>
        System.Threading.Tasks.Task<StudentsResponse> GetStudentsForTeacherAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the students for a teacher
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (StudentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StudentsResponse>> GetStudentsForTeacherAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific teacher
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of TeacherResponse</returns>
        System.Threading.Tasks.Task<TeacherResponse> GetTeacherAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific teacher
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (TeacherResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeacherResponse>> GetTeacherAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the primary teacher for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of TeacherResponse</returns>
        System.Threading.Tasks.Task<TeacherResponse> GetTeacherForSectionAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the primary teacher for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (TeacherResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeacherResponse>> GetTeacherForSectionAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of teachers
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of TeachersResponse</returns>
        System.Threading.Tasks.Task<TeachersResponse> GetTeachersAsync (int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of teachers
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (TeachersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeachersResponse>> GetTeachersAsyncWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the teachers for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of TeachersResponse</returns>
        System.Threading.Tasks.Task<TeachersResponse> GetTeachersForSchoolAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the teachers for a school
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (TeachersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeachersResponse>> GetTeachersForSchoolAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the teachers for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of TeachersResponse</returns>
        System.Threading.Tasks.Task<TeachersResponse> GetTeachersForSectionAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the teachers for a section
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (TeachersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeachersResponse>> GetTeachersForSectionAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the teachers for a student
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of TeachersResponse</returns>
        System.Threading.Tasks.Task<TeachersResponse> GetTeachersForStudentAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the teachers for a student
        /// </remarks>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (TeachersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeachersResponse>> GetTeachersForStudentAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataApi : IDataApi
    {
        private Clever.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Clever.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Clever.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Clever.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Returns a specific student contact
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>StudentContactResponse</returns>
        public StudentContactResponse GetContact (string id)
        {
             ApiResponse<StudentContactResponse> localVarResponse = GetContactWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a specific student contact
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of StudentContactResponse</returns>
        public ApiResponse< StudentContactResponse > GetContactWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetContact");

            var localVarPath = "/contacts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StudentContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StudentContactResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StudentContactResponse)));
        }

        /// <summary>
        ///  Returns a specific student contact
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of StudentContactResponse</returns>
        public async System.Threading.Tasks.Task<StudentContactResponse> GetContactAsync (string id)
        {
             ApiResponse<StudentContactResponse> localVarResponse = await GetContactAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a specific student contact
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (StudentContactResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StudentContactResponse>> GetContactAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetContact");

            var localVarPath = "/contacts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StudentContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StudentContactResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StudentContactResponse)));
        }

        /// <summary>
        ///  Returns a list of student contacts
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>StudentContactsResponse</returns>
        public StudentContactsResponse GetContacts (int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<StudentContactsResponse> localVarResponse = GetContactsWithHttpInfo(limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of student contacts
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of StudentContactsResponse</returns>
        public ApiResponse< StudentContactsResponse > GetContactsWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null)
        {

            var localVarPath = "/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StudentContactsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StudentContactsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StudentContactsResponse)));
        }

        /// <summary>
        ///  Returns a list of student contacts
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of StudentContactsResponse</returns>
        public async System.Threading.Tasks.Task<StudentContactsResponse> GetContactsAsync (int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<StudentContactsResponse> localVarResponse = await GetContactsAsyncWithHttpInfo(limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of student contacts
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (StudentContactsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StudentContactsResponse>> GetContactsAsyncWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null)
        {

            var localVarPath = "/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StudentContactsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StudentContactsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StudentContactsResponse)));
        }

        /// <summary>
        ///  Returns the contacts for a student
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <returns>StudentContactsByStudentResponse</returns>
        public StudentContactsByStudentResponse GetContactsForStudent (string id, int? limit = null)
        {
             ApiResponse<StudentContactsByStudentResponse> localVarResponse = GetContactsForStudentWithHttpInfo(id, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the contacts for a student
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of StudentContactsByStudentResponse</returns>
        public ApiResponse< StudentContactsByStudentResponse > GetContactsForStudentWithHttpInfo (string id, int? limit = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetContactsForStudent");

            var localVarPath = "/students/{id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactsForStudent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StudentContactsByStudentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StudentContactsByStudentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StudentContactsByStudentResponse)));
        }

        /// <summary>
        ///  Returns the contacts for a student
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of StudentContactsByStudentResponse</returns>
        public async System.Threading.Tasks.Task<StudentContactsByStudentResponse> GetContactsForStudentAsync (string id, int? limit = null)
        {
             ApiResponse<StudentContactsByStudentResponse> localVarResponse = await GetContactsForStudentAsyncWithHttpInfo(id, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the contacts for a student
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (StudentContactsByStudentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StudentContactsByStudentResponse>> GetContactsForStudentAsyncWithHttpInfo (string id, int? limit = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetContactsForStudent");

            var localVarPath = "/students/{id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactsForStudent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StudentContactsByStudentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StudentContactsByStudentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StudentContactsByStudentResponse)));
        }

        /// <summary>
        ///  Returns a specific district
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DistrictResponse</returns>
        public DistrictResponse GetDistrict (string id)
        {
             ApiResponse<DistrictResponse> localVarResponse = GetDistrictWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a specific district
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DistrictResponse</returns>
        public ApiResponse< DistrictResponse > GetDistrictWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetDistrict");

            var localVarPath = "/districts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrict", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictResponse)));
        }

        /// <summary>
        ///  Returns a specific district
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DistrictResponse</returns>
        public async System.Threading.Tasks.Task<DistrictResponse> GetDistrictAsync (string id)
        {
             ApiResponse<DistrictResponse> localVarResponse = await GetDistrictAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a specific district
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DistrictResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DistrictResponse>> GetDistrictAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetDistrict");

            var localVarPath = "/districts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrict", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictResponse)));
        }

        /// <summary>
        ///  Returns a specific district admin
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DistrictAdminResponse</returns>
        public DistrictAdminResponse GetDistrictAdmin (string id)
        {
             ApiResponse<DistrictAdminResponse> localVarResponse = GetDistrictAdminWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a specific district admin
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DistrictAdminResponse</returns>
        public ApiResponse< DistrictAdminResponse > GetDistrictAdminWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetDistrictAdmin");

            var localVarPath = "/district_admins/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictAdminResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictAdminResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictAdminResponse)));
        }

        /// <summary>
        ///  Returns a specific district admin
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DistrictAdminResponse</returns>
        public async System.Threading.Tasks.Task<DistrictAdminResponse> GetDistrictAdminAsync (string id)
        {
             ApiResponse<DistrictAdminResponse> localVarResponse = await GetDistrictAdminAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a specific district admin
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DistrictAdminResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DistrictAdminResponse>> GetDistrictAdminAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetDistrictAdmin");

            var localVarPath = "/district_admins/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictAdminResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictAdminResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictAdminResponse)));
        }

        /// <summary>
        ///  Returns a list of district admins
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>DistrictAdminsResponse</returns>
        public DistrictAdminsResponse GetDistrictAdmins (string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<DistrictAdminsResponse> localVarResponse = GetDistrictAdminsWithHttpInfo(startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of district admins
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of DistrictAdminsResponse</returns>
        public ApiResponse< DistrictAdminsResponse > GetDistrictAdminsWithHttpInfo (string startingAfter = null, string endingBefore = null)
        {

            var localVarPath = "/district_admins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictAdmins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictAdminsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictAdminsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictAdminsResponse)));
        }

        /// <summary>
        ///  Returns a list of district admins
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of DistrictAdminsResponse</returns>
        public async System.Threading.Tasks.Task<DistrictAdminsResponse> GetDistrictAdminsAsync (string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<DistrictAdminsResponse> localVarResponse = await GetDistrictAdminsAsyncWithHttpInfo(startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of district admins
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (DistrictAdminsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DistrictAdminsResponse>> GetDistrictAdminsAsyncWithHttpInfo (string startingAfter = null, string endingBefore = null)
        {

            var localVarPath = "/district_admins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictAdmins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictAdminsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictAdminsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictAdminsResponse)));
        }

        /// <summary>
        ///  Returns the district for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DistrictResponse</returns>
        public DistrictResponse GetDistrictForSchool (string id)
        {
             ApiResponse<DistrictResponse> localVarResponse = GetDistrictForSchoolWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the district for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DistrictResponse</returns>
        public ApiResponse< DistrictResponse > GetDistrictForSchoolWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetDistrictForSchool");

            var localVarPath = "/schools/{id}/district";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictForSchool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictResponse)));
        }

        /// <summary>
        ///  Returns the district for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DistrictResponse</returns>
        public async System.Threading.Tasks.Task<DistrictResponse> GetDistrictForSchoolAsync (string id)
        {
             ApiResponse<DistrictResponse> localVarResponse = await GetDistrictForSchoolAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the district for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DistrictResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DistrictResponse>> GetDistrictForSchoolAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetDistrictForSchool");

            var localVarPath = "/schools/{id}/district";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictForSchool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictResponse)));
        }

        /// <summary>
        ///  Returns the district for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DistrictResponse</returns>
        public DistrictResponse GetDistrictForSection (string id)
        {
             ApiResponse<DistrictResponse> localVarResponse = GetDistrictForSectionWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the district for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DistrictResponse</returns>
        public ApiResponse< DistrictResponse > GetDistrictForSectionWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetDistrictForSection");

            var localVarPath = "/sections/{id}/district";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictForSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictResponse)));
        }

        /// <summary>
        ///  Returns the district for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DistrictResponse</returns>
        public async System.Threading.Tasks.Task<DistrictResponse> GetDistrictForSectionAsync (string id)
        {
             ApiResponse<DistrictResponse> localVarResponse = await GetDistrictForSectionAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the district for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DistrictResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DistrictResponse>> GetDistrictForSectionAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetDistrictForSection");

            var localVarPath = "/sections/{id}/district";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictForSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictResponse)));
        }

        /// <summary>
        ///  Returns the district for a student
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DistrictResponse</returns>
        public DistrictResponse GetDistrictForStudent (string id)
        {
             ApiResponse<DistrictResponse> localVarResponse = GetDistrictForStudentWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the district for a student
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DistrictResponse</returns>
        public ApiResponse< DistrictResponse > GetDistrictForStudentWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetDistrictForStudent");

            var localVarPath = "/students/{id}/district";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictForStudent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictResponse)));
        }

        /// <summary>
        ///  Returns the district for a student
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DistrictResponse</returns>
        public async System.Threading.Tasks.Task<DistrictResponse> GetDistrictForStudentAsync (string id)
        {
             ApiResponse<DistrictResponse> localVarResponse = await GetDistrictForStudentAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the district for a student
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DistrictResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DistrictResponse>> GetDistrictForStudentAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetDistrictForStudent");

            var localVarPath = "/students/{id}/district";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictForStudent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictResponse)));
        }

        /// <summary>
        ///  Returns the district for a student contact
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DistrictResponse</returns>
        public DistrictResponse GetDistrictForStudentContact (string id)
        {
             ApiResponse<DistrictResponse> localVarResponse = GetDistrictForStudentContactWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the district for a student contact
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DistrictResponse</returns>
        public ApiResponse< DistrictResponse > GetDistrictForStudentContactWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetDistrictForStudentContact");

            var localVarPath = "/contacts/{id}/district";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictForStudentContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictResponse)));
        }

        /// <summary>
        ///  Returns the district for a student contact
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DistrictResponse</returns>
        public async System.Threading.Tasks.Task<DistrictResponse> GetDistrictForStudentContactAsync (string id)
        {
             ApiResponse<DistrictResponse> localVarResponse = await GetDistrictForStudentContactAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the district for a student contact
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DistrictResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DistrictResponse>> GetDistrictForStudentContactAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetDistrictForStudentContact");

            var localVarPath = "/contacts/{id}/district";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictForStudentContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictResponse)));
        }

        /// <summary>
        ///  Returns the district for a teacher
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DistrictResponse</returns>
        public DistrictResponse GetDistrictForTeacher (string id)
        {
             ApiResponse<DistrictResponse> localVarResponse = GetDistrictForTeacherWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the district for a teacher
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DistrictResponse</returns>
        public ApiResponse< DistrictResponse > GetDistrictForTeacherWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetDistrictForTeacher");

            var localVarPath = "/teachers/{id}/district";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictForTeacher", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictResponse)));
        }

        /// <summary>
        ///  Returns the district for a teacher
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DistrictResponse</returns>
        public async System.Threading.Tasks.Task<DistrictResponse> GetDistrictForTeacherAsync (string id)
        {
             ApiResponse<DistrictResponse> localVarResponse = await GetDistrictForTeacherAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the district for a teacher
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DistrictResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DistrictResponse>> GetDistrictForTeacherAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetDistrictForTeacher");

            var localVarPath = "/teachers/{id}/district";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictForTeacher", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictResponse)));
        }

        /// <summary>
        ///  Returns the status of the district
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DistrictStatusResponses</returns>
        public DistrictStatusResponses GetDistrictStatus (string id)
        {
             ApiResponse<DistrictStatusResponses> localVarResponse = GetDistrictStatusWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the status of the district
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DistrictStatusResponses</returns>
        public ApiResponse< DistrictStatusResponses > GetDistrictStatusWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetDistrictStatus");

            var localVarPath = "/districts/{id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictStatusResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictStatusResponses) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictStatusResponses)));
        }

        /// <summary>
        ///  Returns the status of the district
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DistrictStatusResponses</returns>
        public async System.Threading.Tasks.Task<DistrictStatusResponses> GetDistrictStatusAsync (string id)
        {
             ApiResponse<DistrictStatusResponses> localVarResponse = await GetDistrictStatusAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the status of the district
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DistrictStatusResponses)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DistrictStatusResponses>> GetDistrictStatusAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetDistrictStatus");

            var localVarPath = "/districts/{id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistrictStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictStatusResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictStatusResponses) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictStatusResponses)));
        }

        /// <summary>
        ///  Returns a list of districts
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DistrictsResponse</returns>
        public DistrictsResponse GetDistricts ()
        {
             ApiResponse<DistrictsResponse> localVarResponse = GetDistrictsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of districts
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DistrictsResponse</returns>
        public ApiResponse< DistrictsResponse > GetDistrictsWithHttpInfo ()
        {

            var localVarPath = "/districts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistricts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictsResponse)));
        }

        /// <summary>
        ///  Returns a list of districts
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of DistrictsResponse</returns>
        public async System.Threading.Tasks.Task<DistrictsResponse> GetDistrictsAsync ()
        {
             ApiResponse<DistrictsResponse> localVarResponse = await GetDistrictsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of districts
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (DistrictsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DistrictsResponse>> GetDistrictsAsyncWithHttpInfo ()
        {

            var localVarPath = "/districts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDistricts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DistrictsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DistrictsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DistrictsResponse)));
        }

        /// <summary>
        ///  Returns the grade levels for sections a teacher teaches
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>GradeLevelsResponse</returns>
        public GradeLevelsResponse GetGradeLevelsForTeacher (string id)
        {
             ApiResponse<GradeLevelsResponse> localVarResponse = GetGradeLevelsForTeacherWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the grade levels for sections a teacher teaches
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of GradeLevelsResponse</returns>
        public ApiResponse< GradeLevelsResponse > GetGradeLevelsForTeacherWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetGradeLevelsForTeacher");

            var localVarPath = "/teachers/{id}/grade_levels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGradeLevelsForTeacher", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GradeLevelsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GradeLevelsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GradeLevelsResponse)));
        }

        /// <summary>
        ///  Returns the grade levels for sections a teacher teaches
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of GradeLevelsResponse</returns>
        public async System.Threading.Tasks.Task<GradeLevelsResponse> GetGradeLevelsForTeacherAsync (string id)
        {
             ApiResponse<GradeLevelsResponse> localVarResponse = await GetGradeLevelsForTeacherAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the grade levels for sections a teacher teaches
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (GradeLevelsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GradeLevelsResponse>> GetGradeLevelsForTeacherAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetGradeLevelsForTeacher");

            var localVarPath = "/teachers/{id}/grade_levels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGradeLevelsForTeacher", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GradeLevelsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GradeLevelsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GradeLevelsResponse)));
        }

        /// <summary>
        ///  Returns a specific school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SchoolResponse</returns>
        public SchoolResponse GetSchool (string id)
        {
             ApiResponse<SchoolResponse> localVarResponse = GetSchoolWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a specific school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SchoolResponse</returns>
        public ApiResponse< SchoolResponse > GetSchoolWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSchool");

            var localVarPath = "/schools/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchoolResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchoolResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolResponse)));
        }

        /// <summary>
        ///  Returns a specific school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SchoolResponse</returns>
        public async System.Threading.Tasks.Task<SchoolResponse> GetSchoolAsync (string id)
        {
             ApiResponse<SchoolResponse> localVarResponse = await GetSchoolAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a specific school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SchoolResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SchoolResponse>> GetSchoolAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSchool");

            var localVarPath = "/schools/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchoolResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchoolResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolResponse)));
        }

        /// <summary>
        ///  Returns a specific school admin
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SchoolAdminResponse</returns>
        public SchoolAdminResponse GetSchoolAdmin (string id)
        {
             ApiResponse<SchoolAdminResponse> localVarResponse = GetSchoolAdminWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a specific school admin
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SchoolAdminResponse</returns>
        public ApiResponse< SchoolAdminResponse > GetSchoolAdminWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSchoolAdmin");

            var localVarPath = "/school_admins/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchoolAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchoolAdminResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchoolAdminResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolAdminResponse)));
        }

        /// <summary>
        ///  Returns a specific school admin
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SchoolAdminResponse</returns>
        public async System.Threading.Tasks.Task<SchoolAdminResponse> GetSchoolAdminAsync (string id)
        {
             ApiResponse<SchoolAdminResponse> localVarResponse = await GetSchoolAdminAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a specific school admin
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SchoolAdminResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SchoolAdminResponse>> GetSchoolAdminAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSchoolAdmin");

            var localVarPath = "/school_admins/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchoolAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchoolAdminResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchoolAdminResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolAdminResponse)));
        }

        /// <summary>
        ///  Returns a list of school admins
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>SchoolAdminsResponse</returns>
        public SchoolAdminsResponse GetSchoolAdmins (int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<SchoolAdminsResponse> localVarResponse = GetSchoolAdminsWithHttpInfo(limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of school admins
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of SchoolAdminsResponse</returns>
        public ApiResponse< SchoolAdminsResponse > GetSchoolAdminsWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null)
        {

            var localVarPath = "/school_admins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchoolAdmins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchoolAdminsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchoolAdminsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolAdminsResponse)));
        }

        /// <summary>
        ///  Returns a list of school admins
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of SchoolAdminsResponse</returns>
        public async System.Threading.Tasks.Task<SchoolAdminsResponse> GetSchoolAdminsAsync (int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<SchoolAdminsResponse> localVarResponse = await GetSchoolAdminsAsyncWithHttpInfo(limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of school admins
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (SchoolAdminsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SchoolAdminsResponse>> GetSchoolAdminsAsyncWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null)
        {

            var localVarPath = "/school_admins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchoolAdmins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchoolAdminsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchoolAdminsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolAdminsResponse)));
        }

        /// <summary>
        ///  Returns the school for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SchoolResponse</returns>
        public SchoolResponse GetSchoolForSection (string id)
        {
             ApiResponse<SchoolResponse> localVarResponse = GetSchoolForSectionWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the school for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SchoolResponse</returns>
        public ApiResponse< SchoolResponse > GetSchoolForSectionWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSchoolForSection");

            var localVarPath = "/sections/{id}/school";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchoolForSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchoolResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchoolResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolResponse)));
        }

        /// <summary>
        ///  Returns the school for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SchoolResponse</returns>
        public async System.Threading.Tasks.Task<SchoolResponse> GetSchoolForSectionAsync (string id)
        {
             ApiResponse<SchoolResponse> localVarResponse = await GetSchoolForSectionAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the school for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SchoolResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SchoolResponse>> GetSchoolForSectionAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSchoolForSection");

            var localVarPath = "/sections/{id}/school";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchoolForSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchoolResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchoolResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolResponse)));
        }

        /// <summary>
        ///  Returns the primary school for a student
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SchoolResponse</returns>
        public SchoolResponse GetSchoolForStudent (string id)
        {
             ApiResponse<SchoolResponse> localVarResponse = GetSchoolForStudentWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the primary school for a student
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SchoolResponse</returns>
        public ApiResponse< SchoolResponse > GetSchoolForStudentWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSchoolForStudent");

            var localVarPath = "/students/{id}/school";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchoolForStudent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchoolResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchoolResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolResponse)));
        }

        /// <summary>
        ///  Returns the primary school for a student
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SchoolResponse</returns>
        public async System.Threading.Tasks.Task<SchoolResponse> GetSchoolForStudentAsync (string id)
        {
             ApiResponse<SchoolResponse> localVarResponse = await GetSchoolForStudentAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the primary school for a student
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SchoolResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SchoolResponse>> GetSchoolForStudentAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSchoolForStudent");

            var localVarPath = "/students/{id}/school";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchoolForStudent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchoolResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchoolResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolResponse)));
        }

        /// <summary>
        ///  Retrieves school info for a teacher.
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SchoolResponse</returns>
        public SchoolResponse GetSchoolForTeacher (string id)
        {
             ApiResponse<SchoolResponse> localVarResponse = GetSchoolForTeacherWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves school info for a teacher.
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SchoolResponse</returns>
        public ApiResponse< SchoolResponse > GetSchoolForTeacherWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSchoolForTeacher");

            var localVarPath = "/teachers/{id}/school";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchoolForTeacher", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchoolResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchoolResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolResponse)));
        }

        /// <summary>
        ///  Retrieves school info for a teacher.
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SchoolResponse</returns>
        public async System.Threading.Tasks.Task<SchoolResponse> GetSchoolForTeacherAsync (string id)
        {
             ApiResponse<SchoolResponse> localVarResponse = await GetSchoolForTeacherAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves school info for a teacher.
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SchoolResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SchoolResponse>> GetSchoolForTeacherAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSchoolForTeacher");

            var localVarPath = "/teachers/{id}/school";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchoolForTeacher", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchoolResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchoolResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolResponse)));
        }

        /// <summary>
        ///  Returns a list of schools
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>SchoolsResponse</returns>
        public SchoolsResponse GetSchools (int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<SchoolsResponse> localVarResponse = GetSchoolsWithHttpInfo(limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of schools
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of SchoolsResponse</returns>
        public ApiResponse< SchoolsResponse > GetSchoolsWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null)
        {

            var localVarPath = "/schools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchools", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchoolsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchoolsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolsResponse)));
        }

        /// <summary>
        ///  Returns a list of schools
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of SchoolsResponse</returns>
        public async System.Threading.Tasks.Task<SchoolsResponse> GetSchoolsAsync (int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<SchoolsResponse> localVarResponse = await GetSchoolsAsyncWithHttpInfo(limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of schools
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (SchoolsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SchoolsResponse>> GetSchoolsAsyncWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null)
        {

            var localVarPath = "/schools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchools", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchoolsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchoolsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolsResponse)));
        }

        /// <summary>
        ///  Returns the schools for a school admin
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>SchoolsResponse</returns>
        public SchoolsResponse GetSchoolsForSchoolAdmin (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<SchoolsResponse> localVarResponse = GetSchoolsForSchoolAdminWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the schools for a school admin
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of SchoolsResponse</returns>
        public ApiResponse< SchoolsResponse > GetSchoolsForSchoolAdminWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSchoolsForSchoolAdmin");

            var localVarPath = "/school_admins/{id}/schools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchoolsForSchoolAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchoolsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchoolsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolsResponse)));
        }

        /// <summary>
        ///  Returns the schools for a school admin
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of SchoolsResponse</returns>
        public async System.Threading.Tasks.Task<SchoolsResponse> GetSchoolsForSchoolAdminAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<SchoolsResponse> localVarResponse = await GetSchoolsForSchoolAdminAsyncWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the schools for a school admin
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (SchoolsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SchoolsResponse>> GetSchoolsForSchoolAdminAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSchoolsForSchoolAdmin");

            var localVarPath = "/school_admins/{id}/schools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchoolsForSchoolAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchoolsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchoolsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchoolsResponse)));
        }

        /// <summary>
        ///  Returns a specific section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SectionResponse</returns>
        public SectionResponse GetSection (string id)
        {
             ApiResponse<SectionResponse> localVarResponse = GetSectionWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a specific section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SectionResponse</returns>
        public ApiResponse< SectionResponse > GetSectionWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSection");

            var localVarPath = "/sections/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SectionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SectionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SectionResponse)));
        }

        /// <summary>
        ///  Returns a specific section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SectionResponse</returns>
        public async System.Threading.Tasks.Task<SectionResponse> GetSectionAsync (string id)
        {
             ApiResponse<SectionResponse> localVarResponse = await GetSectionAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a specific section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SectionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SectionResponse>> GetSectionAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSection");

            var localVarPath = "/sections/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SectionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SectionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SectionResponse)));
        }

        /// <summary>
        ///  Returns a list of sections
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>SectionsResponse</returns>
        public SectionsResponse GetSections (int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<SectionsResponse> localVarResponse = GetSectionsWithHttpInfo(limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of sections
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of SectionsResponse</returns>
        public ApiResponse< SectionsResponse > GetSectionsWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null)
        {

            var localVarPath = "/sections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SectionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SectionsResponse)));
        }

        /// <summary>
        ///  Returns a list of sections
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of SectionsResponse</returns>
        public async System.Threading.Tasks.Task<SectionsResponse> GetSectionsAsync (int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<SectionsResponse> localVarResponse = await GetSectionsAsyncWithHttpInfo(limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of sections
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (SectionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SectionsResponse>> GetSectionsAsyncWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null)
        {

            var localVarPath = "/sections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SectionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SectionsResponse)));
        }

        /// <summary>
        ///  Returns the sections for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>SectionsResponse</returns>
        public SectionsResponse GetSectionsForSchool (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<SectionsResponse> localVarResponse = GetSectionsForSchoolWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the sections for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of SectionsResponse</returns>
        public ApiResponse< SectionsResponse > GetSectionsForSchoolWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSectionsForSchool");

            var localVarPath = "/schools/{id}/sections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSectionsForSchool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SectionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SectionsResponse)));
        }

        /// <summary>
        ///  Returns the sections for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of SectionsResponse</returns>
        public async System.Threading.Tasks.Task<SectionsResponse> GetSectionsForSchoolAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<SectionsResponse> localVarResponse = await GetSectionsForSchoolAsyncWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the sections for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (SectionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SectionsResponse>> GetSectionsForSchoolAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSectionsForSchool");

            var localVarPath = "/schools/{id}/sections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSectionsForSchool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SectionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SectionsResponse)));
        }

        /// <summary>
        ///  Returns the sections for a student
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>SectionsResponse</returns>
        public SectionsResponse GetSectionsForStudent (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<SectionsResponse> localVarResponse = GetSectionsForStudentWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the sections for a student
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of SectionsResponse</returns>
        public ApiResponse< SectionsResponse > GetSectionsForStudentWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSectionsForStudent");

            var localVarPath = "/students/{id}/sections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSectionsForStudent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SectionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SectionsResponse)));
        }

        /// <summary>
        ///  Returns the sections for a student
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of SectionsResponse</returns>
        public async System.Threading.Tasks.Task<SectionsResponse> GetSectionsForStudentAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<SectionsResponse> localVarResponse = await GetSectionsForStudentAsyncWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the sections for a student
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (SectionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SectionsResponse>> GetSectionsForStudentAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSectionsForStudent");

            var localVarPath = "/students/{id}/sections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSectionsForStudent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SectionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SectionsResponse)));
        }

        /// <summary>
        ///  Returns the sections for a teacher
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>SectionsResponse</returns>
        public SectionsResponse GetSectionsForTeacher (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<SectionsResponse> localVarResponse = GetSectionsForTeacherWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the sections for a teacher
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of SectionsResponse</returns>
        public ApiResponse< SectionsResponse > GetSectionsForTeacherWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSectionsForTeacher");

            var localVarPath = "/teachers/{id}/sections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSectionsForTeacher", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SectionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SectionsResponse)));
        }

        /// <summary>
        ///  Returns the sections for a teacher
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of SectionsResponse</returns>
        public async System.Threading.Tasks.Task<SectionsResponse> GetSectionsForTeacherAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<SectionsResponse> localVarResponse = await GetSectionsForTeacherAsyncWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the sections for a teacher
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (SectionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SectionsResponse>> GetSectionsForTeacherAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetSectionsForTeacher");

            var localVarPath = "/teachers/{id}/sections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSectionsForTeacher", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SectionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SectionsResponse)));
        }

        /// <summary>
        ///  Returns a specific student
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>StudentResponse</returns>
        public StudentResponse GetStudent (string id)
        {
             ApiResponse<StudentResponse> localVarResponse = GetStudentWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a specific student
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of StudentResponse</returns>
        public ApiResponse< StudentResponse > GetStudentWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetStudent");

            var localVarPath = "/students/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStudent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StudentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StudentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StudentResponse)));
        }

        /// <summary>
        ///  Returns a specific student
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of StudentResponse</returns>
        public async System.Threading.Tasks.Task<StudentResponse> GetStudentAsync (string id)
        {
             ApiResponse<StudentResponse> localVarResponse = await GetStudentAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a specific student
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (StudentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StudentResponse>> GetStudentAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetStudent");

            var localVarPath = "/students/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStudent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StudentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StudentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StudentResponse)));
        }

        /// <summary>
        ///  Returns the student for a student contact
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>StudentResponse</returns>
        public StudentResponse GetStudentForContact (string id)
        {
             ApiResponse<StudentResponse> localVarResponse = GetStudentForContactWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the student for a student contact
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of StudentResponse</returns>
        public ApiResponse< StudentResponse > GetStudentForContactWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetStudentForContact");

            var localVarPath = "/contacts/{id}/student";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStudentForContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StudentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StudentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StudentResponse)));
        }

        /// <summary>
        ///  Returns the student for a student contact
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of StudentResponse</returns>
        public async System.Threading.Tasks.Task<StudentResponse> GetStudentForContactAsync (string id)
        {
             ApiResponse<StudentResponse> localVarResponse = await GetStudentForContactAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the student for a student contact
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (StudentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StudentResponse>> GetStudentForContactAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetStudentForContact");

            var localVarPath = "/contacts/{id}/student";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStudentForContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StudentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StudentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StudentResponse)));
        }

        /// <summary>
        ///  Returns a list of students
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>StudentsResponse</returns>
        public StudentsResponse GetStudents (int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<StudentsResponse> localVarResponse = GetStudentsWithHttpInfo(limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of students
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of StudentsResponse</returns>
        public ApiResponse< StudentsResponse > GetStudentsWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null)
        {

            var localVarPath = "/students";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStudents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StudentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StudentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StudentsResponse)));
        }

        /// <summary>
        ///  Returns a list of students
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of StudentsResponse</returns>
        public async System.Threading.Tasks.Task<StudentsResponse> GetStudentsAsync (int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<StudentsResponse> localVarResponse = await GetStudentsAsyncWithHttpInfo(limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of students
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (StudentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StudentsResponse>> GetStudentsAsyncWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null)
        {

            var localVarPath = "/students";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStudents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StudentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StudentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StudentsResponse)));
        }

        /// <summary>
        ///  Returns the students for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>StudentsResponse</returns>
        public StudentsResponse GetStudentsForSchool (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<StudentsResponse> localVarResponse = GetStudentsForSchoolWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the students for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of StudentsResponse</returns>
        public ApiResponse< StudentsResponse > GetStudentsForSchoolWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetStudentsForSchool");

            var localVarPath = "/schools/{id}/students";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStudentsForSchool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StudentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StudentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StudentsResponse)));
        }

        /// <summary>
        ///  Returns the students for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of StudentsResponse</returns>
        public async System.Threading.Tasks.Task<StudentsResponse> GetStudentsForSchoolAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<StudentsResponse> localVarResponse = await GetStudentsForSchoolAsyncWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the students for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (StudentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StudentsResponse>> GetStudentsForSchoolAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetStudentsForSchool");

            var localVarPath = "/schools/{id}/students";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStudentsForSchool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StudentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StudentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StudentsResponse)));
        }

        /// <summary>
        ///  Returns the students for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>StudentsResponse</returns>
        public StudentsResponse GetStudentsForSection (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<StudentsResponse> localVarResponse = GetStudentsForSectionWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the students for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of StudentsResponse</returns>
        public ApiResponse< StudentsResponse > GetStudentsForSectionWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetStudentsForSection");

            var localVarPath = "/sections/{id}/students";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStudentsForSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StudentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StudentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StudentsResponse)));
        }

        /// <summary>
        ///  Returns the students for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of StudentsResponse</returns>
        public async System.Threading.Tasks.Task<StudentsResponse> GetStudentsForSectionAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<StudentsResponse> localVarResponse = await GetStudentsForSectionAsyncWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the students for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (StudentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StudentsResponse>> GetStudentsForSectionAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetStudentsForSection");

            var localVarPath = "/sections/{id}/students";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStudentsForSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StudentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StudentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StudentsResponse)));
        }

        /// <summary>
        ///  Returns the students for a teacher
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>StudentsResponse</returns>
        public StudentsResponse GetStudentsForTeacher (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<StudentsResponse> localVarResponse = GetStudentsForTeacherWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the students for a teacher
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of StudentsResponse</returns>
        public ApiResponse< StudentsResponse > GetStudentsForTeacherWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetStudentsForTeacher");

            var localVarPath = "/teachers/{id}/students";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStudentsForTeacher", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StudentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StudentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StudentsResponse)));
        }

        /// <summary>
        ///  Returns the students for a teacher
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of StudentsResponse</returns>
        public async System.Threading.Tasks.Task<StudentsResponse> GetStudentsForTeacherAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<StudentsResponse> localVarResponse = await GetStudentsForTeacherAsyncWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the students for a teacher
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (StudentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StudentsResponse>> GetStudentsForTeacherAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetStudentsForTeacher");

            var localVarPath = "/teachers/{id}/students";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStudentsForTeacher", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StudentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StudentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StudentsResponse)));
        }

        /// <summary>
        ///  Returns a specific teacher
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>TeacherResponse</returns>
        public TeacherResponse GetTeacher (string id)
        {
             ApiResponse<TeacherResponse> localVarResponse = GetTeacherWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a specific teacher
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of TeacherResponse</returns>
        public ApiResponse< TeacherResponse > GetTeacherWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetTeacher");

            var localVarPath = "/teachers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeacher", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeacherResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeacherResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeacherResponse)));
        }

        /// <summary>
        ///  Returns a specific teacher
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of TeacherResponse</returns>
        public async System.Threading.Tasks.Task<TeacherResponse> GetTeacherAsync (string id)
        {
             ApiResponse<TeacherResponse> localVarResponse = await GetTeacherAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a specific teacher
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (TeacherResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeacherResponse>> GetTeacherAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetTeacher");

            var localVarPath = "/teachers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeacher", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeacherResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeacherResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeacherResponse)));
        }

        /// <summary>
        ///  Returns the primary teacher for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>TeacherResponse</returns>
        public TeacherResponse GetTeacherForSection (string id)
        {
             ApiResponse<TeacherResponse> localVarResponse = GetTeacherForSectionWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the primary teacher for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of TeacherResponse</returns>
        public ApiResponse< TeacherResponse > GetTeacherForSectionWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetTeacherForSection");

            var localVarPath = "/sections/{id}/teacher";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeacherForSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeacherResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeacherResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeacherResponse)));
        }

        /// <summary>
        ///  Returns the primary teacher for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of TeacherResponse</returns>
        public async System.Threading.Tasks.Task<TeacherResponse> GetTeacherForSectionAsync (string id)
        {
             ApiResponse<TeacherResponse> localVarResponse = await GetTeacherForSectionAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the primary teacher for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (TeacherResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeacherResponse>> GetTeacherForSectionAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetTeacherForSection");

            var localVarPath = "/sections/{id}/teacher";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeacherForSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeacherResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeacherResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeacherResponse)));
        }

        /// <summary>
        ///  Returns a list of teachers
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>TeachersResponse</returns>
        public TeachersResponse GetTeachers (int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<TeachersResponse> localVarResponse = GetTeachersWithHttpInfo(limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of teachers
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of TeachersResponse</returns>
        public ApiResponse< TeachersResponse > GetTeachersWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null)
        {

            var localVarPath = "/teachers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeachers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeachersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeachersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeachersResponse)));
        }

        /// <summary>
        ///  Returns a list of teachers
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of TeachersResponse</returns>
        public async System.Threading.Tasks.Task<TeachersResponse> GetTeachersAsync (int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<TeachersResponse> localVarResponse = await GetTeachersAsyncWithHttpInfo(limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of teachers
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (TeachersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeachersResponse>> GetTeachersAsyncWithHttpInfo (int? limit = null, string startingAfter = null, string endingBefore = null)
        {

            var localVarPath = "/teachers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeachers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeachersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeachersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeachersResponse)));
        }

        /// <summary>
        ///  Returns the teachers for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>TeachersResponse</returns>
        public TeachersResponse GetTeachersForSchool (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<TeachersResponse> localVarResponse = GetTeachersForSchoolWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the teachers for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of TeachersResponse</returns>
        public ApiResponse< TeachersResponse > GetTeachersForSchoolWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetTeachersForSchool");

            var localVarPath = "/schools/{id}/teachers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeachersForSchool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeachersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeachersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeachersResponse)));
        }

        /// <summary>
        ///  Returns the teachers for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of TeachersResponse</returns>
        public async System.Threading.Tasks.Task<TeachersResponse> GetTeachersForSchoolAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<TeachersResponse> localVarResponse = await GetTeachersForSchoolAsyncWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the teachers for a school
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (TeachersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeachersResponse>> GetTeachersForSchoolAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetTeachersForSchool");

            var localVarPath = "/schools/{id}/teachers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeachersForSchool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeachersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeachersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeachersResponse)));
        }

        /// <summary>
        ///  Returns the teachers for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>TeachersResponse</returns>
        public TeachersResponse GetTeachersForSection (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<TeachersResponse> localVarResponse = GetTeachersForSectionWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the teachers for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of TeachersResponse</returns>
        public ApiResponse< TeachersResponse > GetTeachersForSectionWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetTeachersForSection");

            var localVarPath = "/sections/{id}/teachers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeachersForSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeachersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeachersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeachersResponse)));
        }

        /// <summary>
        ///  Returns the teachers for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of TeachersResponse</returns>
        public async System.Threading.Tasks.Task<TeachersResponse> GetTeachersForSectionAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<TeachersResponse> localVarResponse = await GetTeachersForSectionAsyncWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the teachers for a section
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (TeachersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeachersResponse>> GetTeachersForSectionAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetTeachersForSection");

            var localVarPath = "/sections/{id}/teachers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeachersForSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeachersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeachersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeachersResponse)));
        }

        /// <summary>
        ///  Returns the teachers for a student
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>TeachersResponse</returns>
        public TeachersResponse GetTeachersForStudent (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<TeachersResponse> localVarResponse = GetTeachersForStudentWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the teachers for a student
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>ApiResponse of TeachersResponse</returns>
        public ApiResponse< TeachersResponse > GetTeachersForStudentWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetTeachersForStudent");

            var localVarPath = "/students/{id}/teachers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeachersForStudent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeachersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeachersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeachersResponse)));
        }

        /// <summary>
        ///  Returns the teachers for a student
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of TeachersResponse</returns>
        public async System.Threading.Tasks.Task<TeachersResponse> GetTeachersForStudentAsync (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
             ApiResponse<TeachersResponse> localVarResponse = await GetTeachersForStudentAsyncWithHttpInfo(id, limit, startingAfter, endingBefore);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the teachers for a student
        /// </summary>
        /// <exception cref="Clever.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startingAfter"> (optional)</param>
        /// <param name="endingBefore"> (optional)</param>
        /// <returns>Task of ApiResponse (TeachersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeachersResponse>> GetTeachersForStudentAsyncWithHttpInfo (string id, int? limit = null, string startingAfter = null, string endingBefore = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DataApi->GetTeachersForStudent");

            var localVarPath = "/students/{id}/teachers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (startingAfter != null) localVarQueryParams.Add("starting_after", Configuration.ApiClient.ParameterToString(startingAfter)); // query parameter
            if (endingBefore != null) localVarQueryParams.Add("ending_before", Configuration.ApiClient.ParameterToString(endingBefore)); // query parameter

            // authentication (oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeachersForStudent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeachersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeachersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeachersResponse)));
        }

    }
}
