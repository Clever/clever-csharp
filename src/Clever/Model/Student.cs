/* 
 * Clever API
 *
 * The Clever API
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Clever.Client.SwaggerDateConverter;

namespace Clever.Model
{
    /// <summary>
    /// Student
    /// </summary>
    [DataContract]
    public partial class Student :  IEquatable<Student>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets EllStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EllStatusEnum
        {
            
            /// <summary>
            /// Enum Y for "Y"
            /// </summary>
            [EnumMember(Value = "Y")]
            Y,
            
            /// <summary>
            /// Enum N for "N"
            /// </summary>
            [EnumMember(Value = "N")]
            N,
            
            /// <summary>
            /// Enum Empty for ""
            /// </summary>
            [EnumMember(Value = "")]
            Empty
        }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GenderEnum
        {
            
            /// <summary>
            /// Enum M for "M"
            /// </summary>
            [EnumMember(Value = "M")]
            M,
            
            /// <summary>
            /// Enum F for "F"
            /// </summary>
            [EnumMember(Value = "F")]
            F,
            
            /// <summary>
            /// Enum Empty for ""
            /// </summary>
            [EnumMember(Value = "")]
            Empty
        }

        /// <summary>
        /// Gets or Sets Grade
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GradeEnum
        {
            
            /// <summary>
            /// Enum _1 for "1"
            /// </summary>
            [EnumMember(Value = "1")]
            _1,
            
            /// <summary>
            /// Enum _2 for "2"
            /// </summary>
            [EnumMember(Value = "2")]
            _2,
            
            /// <summary>
            /// Enum _3 for "3"
            /// </summary>
            [EnumMember(Value = "3")]
            _3,
            
            /// <summary>
            /// Enum _4 for "4"
            /// </summary>
            [EnumMember(Value = "4")]
            _4,
            
            /// <summary>
            /// Enum _5 for "5"
            /// </summary>
            [EnumMember(Value = "5")]
            _5,
            
            /// <summary>
            /// Enum _6 for "6"
            /// </summary>
            [EnumMember(Value = "6")]
            _6,
            
            /// <summary>
            /// Enum _7 for "7"
            /// </summary>
            [EnumMember(Value = "7")]
            _7,
            
            /// <summary>
            /// Enum _8 for "8"
            /// </summary>
            [EnumMember(Value = "8")]
            _8,
            
            /// <summary>
            /// Enum _9 for "9"
            /// </summary>
            [EnumMember(Value = "9")]
            _9,
            
            /// <summary>
            /// Enum _10 for "10"
            /// </summary>
            [EnumMember(Value = "10")]
            _10,
            
            /// <summary>
            /// Enum _11 for "11"
            /// </summary>
            [EnumMember(Value = "11")]
            _11,
            
            /// <summary>
            /// Enum _12 for "12"
            /// </summary>
            [EnumMember(Value = "12")]
            _12,
            
            /// <summary>
            /// Enum PreKindergarten for "PreKindergarten"
            /// </summary>
            [EnumMember(Value = "PreKindergarten")]
            PreKindergarten,
            
            /// <summary>
            /// Enum Kindergarten for "Kindergarten"
            /// </summary>
            [EnumMember(Value = "Kindergarten")]
            Kindergarten,
            
            /// <summary>
            /// Enum PostGraduate for "PostGraduate"
            /// </summary>
            [EnumMember(Value = "PostGraduate")]
            PostGraduate,
            
            /// <summary>
            /// Enum Other for "Other"
            /// </summary>
            [EnumMember(Value = "Other")]
            Other
        }

        /// <summary>
        /// Gets or Sets HispanicEthnicity
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HispanicEthnicityEnum
        {
            
            /// <summary>
            /// Enum Y for "Y"
            /// </summary>
            [EnumMember(Value = "Y")]
            Y,
            
            /// <summary>
            /// Enum N for "N"
            /// </summary>
            [EnumMember(Value = "N")]
            N,
            
            /// <summary>
            /// Enum Empty for ""
            /// </summary>
            [EnumMember(Value = "")]
            Empty
        }

        /// <summary>
        /// Gets or Sets HomeLanguage
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HomeLanguageEnum
        {
            
            /// <summary>
            /// Enum English for "English"
            /// </summary>
            [EnumMember(Value = "English")]
            English,
            
            /// <summary>
            /// Enum Albanian for "Albanian"
            /// </summary>
            [EnumMember(Value = "Albanian")]
            Albanian,
            
            /// <summary>
            /// Enum Amharic for "Amharic"
            /// </summary>
            [EnumMember(Value = "Amharic")]
            Amharic,
            
            /// <summary>
            /// Enum Arabic for "Arabic"
            /// </summary>
            [EnumMember(Value = "Arabic")]
            Arabic,
            
            /// <summary>
            /// Enum Bengali for "Bengali"
            /// </summary>
            [EnumMember(Value = "Bengali")]
            Bengali,
            
            /// <summary>
            /// Enum Bosnian for "Bosnian"
            /// </summary>
            [EnumMember(Value = "Bosnian")]
            Bosnian,
            
            /// <summary>
            /// Enum Burmese for "Burmese"
            /// </summary>
            [EnumMember(Value = "Burmese")]
            Burmese,
            
            /// <summary>
            /// Enum Cantonese for "Cantonese"
            /// </summary>
            [EnumMember(Value = "Cantonese")]
            Cantonese,
            
            /// <summary>
            /// Enum Chinese for "Chinese"
            /// </summary>
            [EnumMember(Value = "Chinese")]
            Chinese,
            
            /// <summary>
            /// Enum Dutch for "Dutch"
            /// </summary>
            [EnumMember(Value = "Dutch")]
            Dutch,
            
            /// <summary>
            /// Enum Farsi for "Farsi"
            /// </summary>
            [EnumMember(Value = "Farsi")]
            Farsi,
            
            /// <summary>
            /// Enum French for "French"
            /// </summary>
            [EnumMember(Value = "French")]
            French,
            
            /// <summary>
            /// Enum German for "German"
            /// </summary>
            [EnumMember(Value = "German")]
            German,
            
            /// <summary>
            /// Enum Hebrew for "Hebrew"
            /// </summary>
            [EnumMember(Value = "Hebrew")]
            Hebrew,
            
            /// <summary>
            /// Enum Hindi for "Hindi"
            /// </summary>
            [EnumMember(Value = "Hindi")]
            Hindi,
            
            /// <summary>
            /// Enum Hmong for "Hmong"
            /// </summary>
            [EnumMember(Value = "Hmong")]
            Hmong,
            
            /// <summary>
            /// Enum Ilocano for "Ilocano"
            /// </summary>
            [EnumMember(Value = "Ilocano")]
            Ilocano,
            
            /// <summary>
            /// Enum Japanese for "Japanese"
            /// </summary>
            [EnumMember(Value = "Japanese")]
            Japanese,
            
            /// <summary>
            /// Enum Javanese for "Javanese"
            /// </summary>
            [EnumMember(Value = "Javanese")]
            Javanese,
            
            /// <summary>
            /// Enum Karen for "Karen"
            /// </summary>
            [EnumMember(Value = "Karen")]
            Karen,
            
            /// <summary>
            /// Enum Khmer for "Khmer"
            /// </summary>
            [EnumMember(Value = "Khmer")]
            Khmer,
            
            /// <summary>
            /// Enum Korean for "Korean"
            /// </summary>
            [EnumMember(Value = "Korean")]
            Korean,
            
            /// <summary>
            /// Enum Laotian for "Laotian"
            /// </summary>
            [EnumMember(Value = "Laotian")]
            Laotian,
            
            /// <summary>
            /// Enum Latvian for "Latvian"
            /// </summary>
            [EnumMember(Value = "Latvian")]
            Latvian,
            
            /// <summary>
            /// Enum Malay for "Malay"
            /// </summary>
            [EnumMember(Value = "Malay")]
            Malay,
            
            /// <summary>
            /// Enum Mandarin for "Mandarin"
            /// </summary>
            [EnumMember(Value = "Mandarin")]
            Mandarin,
            
            /// <summary>
            /// Enum Nepali for "Nepali"
            /// </summary>
            [EnumMember(Value = "Nepali")]
            Nepali,
            
            /// <summary>
            /// Enum Oromo for "Oromo"
            /// </summary>
            [EnumMember(Value = "Oromo")]
            Oromo,
            
            /// <summary>
            /// Enum Polish for "Polish"
            /// </summary>
            [EnumMember(Value = "Polish")]
            Polish,
            
            /// <summary>
            /// Enum Portuguese for "Portuguese"
            /// </summary>
            [EnumMember(Value = "Portuguese")]
            Portuguese,
            
            /// <summary>
            /// Enum Punjabi for "Punjabi"
            /// </summary>
            [EnumMember(Value = "Punjabi")]
            Punjabi,
            
            /// <summary>
            /// Enum Romanian for "Romanian"
            /// </summary>
            [EnumMember(Value = "Romanian")]
            Romanian,
            
            /// <summary>
            /// Enum Russian for "Russian"
            /// </summary>
            [EnumMember(Value = "Russian")]
            Russian,
            
            /// <summary>
            /// Enum Samoan for "Samoan"
            /// </summary>
            [EnumMember(Value = "Samoan")]
            Samoan,
            
            /// <summary>
            /// Enum Serbian for "Serbian"
            /// </summary>
            [EnumMember(Value = "Serbian")]
            Serbian,
            
            /// <summary>
            /// Enum Somali for "Somali"
            /// </summary>
            [EnumMember(Value = "Somali")]
            Somali,
            
            /// <summary>
            /// Enum Spanish for "Spanish"
            /// </summary>
            [EnumMember(Value = "Spanish")]
            Spanish,
            
            /// <summary>
            /// Enum Swahili for "Swahili"
            /// </summary>
            [EnumMember(Value = "Swahili")]
            Swahili,
            
            /// <summary>
            /// Enum Tagalog for "Tagalog"
            /// </summary>
            [EnumMember(Value = "Tagalog")]
            Tagalog,
            
            /// <summary>
            /// Enum Tamil for "Tamil"
            /// </summary>
            [EnumMember(Value = "Tamil")]
            Tamil,
            
            /// <summary>
            /// Enum Telegu for "Telegu"
            /// </summary>
            [EnumMember(Value = "Telegu")]
            Telegu,
            
            /// <summary>
            /// Enum Thai for "Thai"
            /// </summary>
            [EnumMember(Value = "Thai")]
            Thai,
            
            /// <summary>
            /// Enum Tigrinya for "Tigrinya"
            /// </summary>
            [EnumMember(Value = "Tigrinya")]
            Tigrinya,
            
            /// <summary>
            /// Enum Turkish for "Turkish"
            /// </summary>
            [EnumMember(Value = "Turkish")]
            Turkish,
            
            /// <summary>
            /// Enum Ukrainian for "Ukrainian"
            /// </summary>
            [EnumMember(Value = "Ukrainian")]
            Ukrainian,
            
            /// <summary>
            /// Enum Urdu for "Urdu"
            /// </summary>
            [EnumMember(Value = "Urdu")]
            Urdu,
            
            /// <summary>
            /// Enum Vietnamese for "Vietnamese"
            /// </summary>
            [EnumMember(Value = "Vietnamese")]
            Vietnamese
        }

        /// <summary>
        /// Gets or Sets Race
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RaceEnum
        {
            
            /// <summary>
            /// Enum Caucasian for "Caucasian"
            /// </summary>
            [EnumMember(Value = "Caucasian")]
            Caucasian,
            
            /// <summary>
            /// Enum Asian for "Asian"
            /// </summary>
            [EnumMember(Value = "Asian")]
            Asian,
            
            /// <summary>
            /// Enum BlackorAfricanAmerican for "Black or African American"
            /// </summary>
            [EnumMember(Value = "Black or African American")]
            BlackorAfricanAmerican,
            
            /// <summary>
            /// Enum AmericanIndian for "American Indian"
            /// </summary>
            [EnumMember(Value = "American Indian")]
            AmericanIndian,
            
            /// <summary>
            /// Enum HawaiianorOtherPacificIslander for "Hawaiian or Other Pacific Islander"
            /// </summary>
            [EnumMember(Value = "Hawaiian or Other Pacific Islander")]
            HawaiianorOtherPacificIslander,
            
            /// <summary>
            /// Enum TwoorMoreRaces for "Two or More Races"
            /// </summary>
            [EnumMember(Value = "Two or More Races")]
            TwoorMoreRaces,
            
            /// <summary>
            /// Enum Unknown for "Unknown"
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown,
            
            /// <summary>
            /// Enum Empty for ""
            /// </summary>
            [EnumMember(Value = "")]
            Empty
        }

        /// <summary>
        /// Gets or Sets EllStatus
        /// </summary>
        [DataMember(Name="ell_status", EmitDefaultValue=false)]
        public EllStatusEnum? EllStatus { get; set; }
        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [DataMember(Name="gender", EmitDefaultValue=false)]
        public GenderEnum? Gender { get; set; }
        /// <summary>
        /// Gets or Sets Grade
        /// </summary>
        [DataMember(Name="grade", EmitDefaultValue=false)]
        public GradeEnum? Grade { get; set; }
        /// <summary>
        /// Gets or Sets HispanicEthnicity
        /// </summary>
        [DataMember(Name="hispanic_ethnicity", EmitDefaultValue=false)]
        public HispanicEthnicityEnum? HispanicEthnicity { get; set; }
        /// <summary>
        /// Gets or Sets HomeLanguage
        /// </summary>
        [DataMember(Name="home_language", EmitDefaultValue=false)]
        public HomeLanguageEnum? HomeLanguage { get; set; }
        /// <summary>
        /// Gets or Sets Race
        /// </summary>
        [DataMember(Name="race", EmitDefaultValue=false)]
        public RaceEnum? Race { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Student" /> class.
        /// </summary>
        /// <param name="Created">Created.</param>
        /// <param name="Credentials">Credentials.</param>
        /// <param name="District">District.</param>
        /// <param name="Dob">Dob.</param>
        /// <param name="EllStatus">EllStatus.</param>
        /// <param name="Email">Email.</param>
        /// <param name="Gender">Gender.</param>
        /// <param name="Grade">Grade.</param>
        /// <param name="GraduationYear">GraduationYear.</param>
        /// <param name="HispanicEthnicity">HispanicEthnicity.</param>
        /// <param name="HomeLanguage">HomeLanguage.</param>
        /// <param name="Id">Id.</param>
        /// <param name="IepStatus">IepStatus.</param>
        /// <param name="LastModified">LastModified.</param>
        /// <param name="Location">Location.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Race">Race.</param>
        /// <param name="School">School.</param>
        /// <param name="Schools">Schools.</param>
        /// <param name="SisId">SisId.</param>
        /// <param name="StateId">StateId.</param>
        /// <param name="StudentNumber">StudentNumber.</param>
        /// <param name="UnweightedGpa">UnweightedGpa.</param>
        /// <param name="WeightedGpa">WeightedGpa.</param>
        public Student(string Created = default(string), Credentials Credentials = default(Credentials), string District = default(string), string Dob = default(string), EllStatusEnum? EllStatus = default(EllStatusEnum?), string Email = default(string), GenderEnum? Gender = default(GenderEnum?), GradeEnum? Grade = default(GradeEnum?), string GraduationYear = default(string), HispanicEthnicityEnum? HispanicEthnicity = default(HispanicEthnicityEnum?), HomeLanguageEnum? HomeLanguage = default(HomeLanguageEnum?), string Id = default(string), string IepStatus = default(string), string LastModified = default(string), Location Location = default(Location), Name Name = default(Name), RaceEnum? Race = default(RaceEnum?), string School = default(string), List<string> Schools = default(List<string>), string SisId = default(string), string StateId = default(string), string StudentNumber = default(string), string UnweightedGpa = default(string), string WeightedGpa = default(string))
        {
            this.Created = Created;
            this.Credentials = Credentials;
            this.District = District;
            this.Dob = Dob;
            this.EllStatus = EllStatus;
            this.Email = Email;
            this.Gender = Gender;
            this.Grade = Grade;
            this.GraduationYear = GraduationYear;
            this.HispanicEthnicity = HispanicEthnicity;
            this.HomeLanguage = HomeLanguage;
            this.Id = Id;
            this.IepStatus = IepStatus;
            this.LastModified = LastModified;
            this.Location = Location;
            this.Name = Name;
            this.Race = Race;
            this.School = School;
            this.Schools = Schools;
            this.SisId = SisId;
            this.StateId = StateId;
            this.StudentNumber = StudentNumber;
            this.UnweightedGpa = UnweightedGpa;
            this.WeightedGpa = WeightedGpa;
        }
        
        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public string Created { get; set; }

        /// <summary>
        /// Gets or Sets Credentials
        /// </summary>
        [DataMember(Name="credentials", EmitDefaultValue=false)]
        public Credentials Credentials { get; set; }

        /// <summary>
        /// Gets or Sets District
        /// </summary>
        [DataMember(Name="district", EmitDefaultValue=false)]
        public string District { get; set; }

        /// <summary>
        /// Gets or Sets Dob
        /// </summary>
        [DataMember(Name="dob", EmitDefaultValue=false)]
        public string Dob { get; set; }


        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }



        /// <summary>
        /// Gets or Sets GraduationYear
        /// </summary>
        [DataMember(Name="graduation_year", EmitDefaultValue=false)]
        public string GraduationYear { get; set; }



        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IepStatus
        /// </summary>
        [DataMember(Name="iep_status", EmitDefaultValue=false)]
        public string IepStatus { get; set; }

        /// <summary>
        /// Gets or Sets LastModified
        /// </summary>
        [DataMember(Name="last_modified", EmitDefaultValue=false)]
        public string LastModified { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public Location Location { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public Name Name { get; set; }


        /// <summary>
        /// Gets or Sets School
        /// </summary>
        [DataMember(Name="school", EmitDefaultValue=false)]
        public string School { get; set; }

        /// <summary>
        /// Gets or Sets Schools
        /// </summary>
        [DataMember(Name="schools", EmitDefaultValue=false)]
        public List<string> Schools { get; set; }

        /// <summary>
        /// Gets or Sets SisId
        /// </summary>
        [DataMember(Name="sis_id", EmitDefaultValue=false)]
        public string SisId { get; set; }

        /// <summary>
        /// Gets or Sets StateId
        /// </summary>
        [DataMember(Name="state_id", EmitDefaultValue=false)]
        public string StateId { get; set; }

        /// <summary>
        /// Gets or Sets StudentNumber
        /// </summary>
        [DataMember(Name="student_number", EmitDefaultValue=false)]
        public string StudentNumber { get; set; }

        /// <summary>
        /// Gets or Sets UnweightedGpa
        /// </summary>
        [DataMember(Name="unweighted_gpa", EmitDefaultValue=false)]
        public string UnweightedGpa { get; set; }

        /// <summary>
        /// Gets or Sets WeightedGpa
        /// </summary>
        [DataMember(Name="weighted_gpa", EmitDefaultValue=false)]
        public string WeightedGpa { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Student {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Credentials: ").Append(Credentials).Append("\n");
            sb.Append("  District: ").Append(District).Append("\n");
            sb.Append("  Dob: ").Append(Dob).Append("\n");
            sb.Append("  EllStatus: ").Append(EllStatus).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  GraduationYear: ").Append(GraduationYear).Append("\n");
            sb.Append("  HispanicEthnicity: ").Append(HispanicEthnicity).Append("\n");
            sb.Append("  HomeLanguage: ").Append(HomeLanguage).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IepStatus: ").Append(IepStatus).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Race: ").Append(Race).Append("\n");
            sb.Append("  School: ").Append(School).Append("\n");
            sb.Append("  Schools: ").Append(Schools).Append("\n");
            sb.Append("  SisId: ").Append(SisId).Append("\n");
            sb.Append("  StateId: ").Append(StateId).Append("\n");
            sb.Append("  StudentNumber: ").Append(StudentNumber).Append("\n");
            sb.Append("  UnweightedGpa: ").Append(UnweightedGpa).Append("\n");
            sb.Append("  WeightedGpa: ").Append(WeightedGpa).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Student);
        }

        /// <summary>
        /// Returns true if Student instances are equal
        /// </summary>
        /// <param name="input">Instance of Student to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Student input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Credentials == input.Credentials ||
                    (this.Credentials != null &&
                    this.Credentials.Equals(input.Credentials))
                ) && 
                (
                    this.District == input.District ||
                    (this.District != null &&
                    this.District.Equals(input.District))
                ) && 
                (
                    this.Dob == input.Dob ||
                    (this.Dob != null &&
                    this.Dob.Equals(input.Dob))
                ) && 
                (
                    this.EllStatus == input.EllStatus ||
                    (this.EllStatus != null &&
                    this.EllStatus.Equals(input.EllStatus))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Gender == input.Gender ||
                    (this.Gender != null &&
                    this.Gender.Equals(input.Gender))
                ) && 
                (
                    this.Grade == input.Grade ||
                    (this.Grade != null &&
                    this.Grade.Equals(input.Grade))
                ) && 
                (
                    this.GraduationYear == input.GraduationYear ||
                    (this.GraduationYear != null &&
                    this.GraduationYear.Equals(input.GraduationYear))
                ) && 
                (
                    this.HispanicEthnicity == input.HispanicEthnicity ||
                    (this.HispanicEthnicity != null &&
                    this.HispanicEthnicity.Equals(input.HispanicEthnicity))
                ) && 
                (
                    this.HomeLanguage == input.HomeLanguage ||
                    (this.HomeLanguage != null &&
                    this.HomeLanguage.Equals(input.HomeLanguage))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IepStatus == input.IepStatus ||
                    (this.IepStatus != null &&
                    this.IepStatus.Equals(input.IepStatus))
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Race == input.Race ||
                    (this.Race != null &&
                    this.Race.Equals(input.Race))
                ) && 
                (
                    this.School == input.School ||
                    (this.School != null &&
                    this.School.Equals(input.School))
                ) && 
                (
                    this.Schools == input.Schools ||
                    this.Schools != null &&
                    this.Schools.SequenceEqual(input.Schools)
                ) && 
                (
                    this.SisId == input.SisId ||
                    (this.SisId != null &&
                    this.SisId.Equals(input.SisId))
                ) && 
                (
                    this.StateId == input.StateId ||
                    (this.StateId != null &&
                    this.StateId.Equals(input.StateId))
                ) && 
                (
                    this.StudentNumber == input.StudentNumber ||
                    (this.StudentNumber != null &&
                    this.StudentNumber.Equals(input.StudentNumber))
                ) && 
                (
                    this.UnweightedGpa == input.UnweightedGpa ||
                    (this.UnweightedGpa != null &&
                    this.UnweightedGpa.Equals(input.UnweightedGpa))
                ) && 
                (
                    this.WeightedGpa == input.WeightedGpa ||
                    (this.WeightedGpa != null &&
                    this.WeightedGpa.Equals(input.WeightedGpa))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Credentials != null)
                    hashCode = hashCode * 59 + this.Credentials.GetHashCode();
                if (this.District != null)
                    hashCode = hashCode * 59 + this.District.GetHashCode();
                if (this.Dob != null)
                    hashCode = hashCode * 59 + this.Dob.GetHashCode();
                if (this.EllStatus != null)
                    hashCode = hashCode * 59 + this.EllStatus.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Gender != null)
                    hashCode = hashCode * 59 + this.Gender.GetHashCode();
                if (this.Grade != null)
                    hashCode = hashCode * 59 + this.Grade.GetHashCode();
                if (this.GraduationYear != null)
                    hashCode = hashCode * 59 + this.GraduationYear.GetHashCode();
                if (this.HispanicEthnicity != null)
                    hashCode = hashCode * 59 + this.HispanicEthnicity.GetHashCode();
                if (this.HomeLanguage != null)
                    hashCode = hashCode * 59 + this.HomeLanguage.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IepStatus != null)
                    hashCode = hashCode * 59 + this.IepStatus.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Race != null)
                    hashCode = hashCode * 59 + this.Race.GetHashCode();
                if (this.School != null)
                    hashCode = hashCode * 59 + this.School.GetHashCode();
                if (this.Schools != null)
                    hashCode = hashCode * 59 + this.Schools.GetHashCode();
                if (this.SisId != null)
                    hashCode = hashCode * 59 + this.SisId.GetHashCode();
                if (this.StateId != null)
                    hashCode = hashCode * 59 + this.StateId.GetHashCode();
                if (this.StudentNumber != null)
                    hashCode = hashCode * 59 + this.StudentNumber.GetHashCode();
                if (this.UnweightedGpa != null)
                    hashCode = hashCode * 59 + this.UnweightedGpa.GetHashCode();
                if (this.WeightedGpa != null)
                    hashCode = hashCode * 59 + this.WeightedGpa.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
