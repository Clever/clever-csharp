/* 
 * Clever API
 *
 * The Clever API
 *
 * OpenAPI spec version: 1.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Clever.Client.SwaggerDateConverter;

namespace Clever.Model
{
    /// <summary>
    /// ModelEvent
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "type")]
    [JsonSubtypes.KnownSubType(typeof(DistrictsUpdated), "districts.updated")]
    [JsonSubtypes.KnownSubType(typeof(DistrictsDeleted), "districts.deleted")]
    [JsonSubtypes.KnownSubType(typeof(SchooladminsCreated), "schooladmins.created")]
    [JsonSubtypes.KnownSubType(typeof(TeachersUpdated), "teachers.updated")]
    [JsonSubtypes.KnownSubType(typeof(TeachersDeleted), "teachers.deleted")]
    [JsonSubtypes.KnownSubType(typeof(DistrictsCreated), "districts.created")]
    [JsonSubtypes.KnownSubType(typeof(SectionsCreated), "sections.created")]
    [JsonSubtypes.KnownSubType(typeof(StudentcontactsDeleted), "studentcontacts.deleted")]
    [JsonSubtypes.KnownSubType(typeof(SchooladminsDeleted), "schooladmins.deleted")]
    [JsonSubtypes.KnownSubType(typeof(StudentsDeleted), "students.deleted")]
    [JsonSubtypes.KnownSubType(typeof(SchoolsCreated), "schools.created")]
    [JsonSubtypes.KnownSubType(typeof(SectionsDeleted), "sections.deleted")]
    [JsonSubtypes.KnownSubType(typeof(SectionsUpdated), "sections.updated")]
    [JsonSubtypes.KnownSubType(typeof(SchoolsDeleted), "schools.deleted")]
    [JsonSubtypes.KnownSubType(typeof(TeachersCreated), "teachers.created")]
    [JsonSubtypes.KnownSubType(typeof(SchoolsUpdated), "schools.updated")]
    [JsonSubtypes.KnownSubType(typeof(StudentsCreated), "students.created")]
    [JsonSubtypes.KnownSubType(typeof(SchooladminsUpdated), "schooladmins.updated")]
    [JsonSubtypes.KnownSubType(typeof(StudentcontactsUpdated), "studentcontacts.updated")]
    [JsonSubtypes.KnownSubType(typeof(StudentsUpdated), "students.updated")]
    [JsonSubtypes.KnownSubType(typeof(StudentcontactsCreated), "studentcontacts.created")]
    public partial class ModelEvent :  IEquatable<ModelEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModelEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelEvent" /> class.
        /// </summary>
        /// <param name="Created">Created.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Type">Type (required).</param>
        public ModelEvent(string Created = default(string), string Id = default(string), string Type = default(string))
        {
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for ModelEvent and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            this.Created = Created;
            this.Id = Id;
        }
        
        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public string Created { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelEvent {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelEvent);
        }

        /// <summary>
        /// Returns true if ModelEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
