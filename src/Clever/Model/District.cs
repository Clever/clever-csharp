/* 
 * Clever API
 *
 * The Clever API
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Clever.Client.SwaggerDateConverter;

namespace Clever.Model
{
    /// <summary>
    /// District
    /// </summary>
    [DataContract]
    public partial class District :  IEquatable<District>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum Running for "running"
            /// </summary>
            [EnumMember(Value = "running")]
            Running,
            
            /// <summary>
            /// Enum Pending for "pending"
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending,
            
            /// <summary>
            /// Enum Error for "error"
            /// </summary>
            [EnumMember(Value = "error")]
            Error,
            
            /// <summary>
            /// Enum Paused for "paused"
            /// </summary>
            [EnumMember(Value = "paused")]
            Paused
        }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="District" /> class.
        /// </summary>
        /// <param name="Error">Error.</param>
        /// <param name="Id">Id.</param>
        /// <param name="LastSync">LastSync.</param>
        /// <param name="LaunchDate">LaunchDate.</param>
        /// <param name="MdrNumber">MdrNumber.</param>
        /// <param name="Name">Name.</param>
        /// <param name="NcesId">NcesId.</param>
        /// <param name="PauseEnd">PauseEnd.</param>
        /// <param name="PauseStart">PauseStart.</param>
        /// <param name="SisType">SisType.</param>
        /// <param name="State">State.</param>
        public District(string Error = default(string), string Id = default(string), string LastSync = default(string), string LaunchDate = default(string), string MdrNumber = default(string), string Name = default(string), string NcesId = default(string), string PauseEnd = default(string), string PauseStart = default(string), string SisType = default(string), StateEnum? State = default(StateEnum?))
        {
            this.Error = Error;
            this.Id = Id;
            this.LastSync = LastSync;
            this.LaunchDate = LaunchDate;
            this.MdrNumber = MdrNumber;
            this.Name = Name;
            this.NcesId = NcesId;
            this.PauseEnd = PauseEnd;
            this.PauseStart = PauseStart;
            this.SisType = SisType;
            this.State = State;
        }
        
        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public string Error { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets LastSync
        /// </summary>
        [DataMember(Name="last_sync", EmitDefaultValue=false)]
        public string LastSync { get; set; }

        /// <summary>
        /// Gets or Sets LaunchDate
        /// </summary>
        [DataMember(Name="launch_date", EmitDefaultValue=false)]
        public string LaunchDate { get; set; }

        /// <summary>
        /// Gets or Sets MdrNumber
        /// </summary>
        [DataMember(Name="mdr_number", EmitDefaultValue=false)]
        public string MdrNumber { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets NcesId
        /// </summary>
        [DataMember(Name="nces_id", EmitDefaultValue=false)]
        public string NcesId { get; set; }

        /// <summary>
        /// Gets or Sets PauseEnd
        /// </summary>
        [DataMember(Name="pause_end", EmitDefaultValue=false)]
        public string PauseEnd { get; set; }

        /// <summary>
        /// Gets or Sets PauseStart
        /// </summary>
        [DataMember(Name="pause_start", EmitDefaultValue=false)]
        public string PauseStart { get; set; }

        /// <summary>
        /// Gets or Sets SisType
        /// </summary>
        [DataMember(Name="sis_type", EmitDefaultValue=false)]
        public string SisType { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class District {\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastSync: ").Append(LastSync).Append("\n");
            sb.Append("  LaunchDate: ").Append(LaunchDate).Append("\n");
            sb.Append("  MdrNumber: ").Append(MdrNumber).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NcesId: ").Append(NcesId).Append("\n");
            sb.Append("  PauseEnd: ").Append(PauseEnd).Append("\n");
            sb.Append("  PauseStart: ").Append(PauseStart).Append("\n");
            sb.Append("  SisType: ").Append(SisType).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as District);
        }

        /// <summary>
        /// Returns true if District instances are equal
        /// </summary>
        /// <param name="input">Instance of District to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(District input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LastSync == input.LastSync ||
                    (this.LastSync != null &&
                    this.LastSync.Equals(input.LastSync))
                ) && 
                (
                    this.LaunchDate == input.LaunchDate ||
                    (this.LaunchDate != null &&
                    this.LaunchDate.Equals(input.LaunchDate))
                ) && 
                (
                    this.MdrNumber == input.MdrNumber ||
                    (this.MdrNumber != null &&
                    this.MdrNumber.Equals(input.MdrNumber))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NcesId == input.NcesId ||
                    (this.NcesId != null &&
                    this.NcesId.Equals(input.NcesId))
                ) && 
                (
                    this.PauseEnd == input.PauseEnd ||
                    (this.PauseEnd != null &&
                    this.PauseEnd.Equals(input.PauseEnd))
                ) && 
                (
                    this.PauseStart == input.PauseStart ||
                    (this.PauseStart != null &&
                    this.PauseStart.Equals(input.PauseStart))
                ) && 
                (
                    this.SisType == input.SisType ||
                    (this.SisType != null &&
                    this.SisType.Equals(input.SisType))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LastSync != null)
                    hashCode = hashCode * 59 + this.LastSync.GetHashCode();
                if (this.LaunchDate != null)
                    hashCode = hashCode * 59 + this.LaunchDate.GetHashCode();
                if (this.MdrNumber != null)
                    hashCode = hashCode * 59 + this.MdrNumber.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.NcesId != null)
                    hashCode = hashCode * 59 + this.NcesId.GetHashCode();
                if (this.PauseEnd != null)
                    hashCode = hashCode * 59 + this.PauseEnd.GetHashCode();
                if (this.PauseStart != null)
                    hashCode = hashCode * 59 + this.PauseStart.GetHashCode();
                if (this.SisType != null)
                    hashCode = hashCode * 59 + this.SisType.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
