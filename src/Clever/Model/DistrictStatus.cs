/* 
 * Clever API
 *
 * The Clever API
 *
 * OpenAPI spec version: 1.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Clever.Client.SwaggerDateConverter;

namespace Clever.Model
{
    /// <summary>
    /// DistrictStatus
    /// </summary>
    [DataContract]
    public partial class DistrictStatus :  IEquatable<DistrictStatus>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum Running for "running"
            /// </summary>
            [EnumMember(Value = "running")]
            Running,
            
            /// <summary>
            /// Enum Pending for "pending"
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending,
            
            /// <summary>
            /// Enum Error for "error"
            /// </summary>
            [EnumMember(Value = "error")]
            Error,
            
            /// <summary>
            /// Enum Paused for "paused"
            /// </summary>
            [EnumMember(Value = "paused")]
            Paused
        }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DistrictStatus" /> class.
        /// </summary>
        /// <param name="Error">Error.</param>
        /// <param name="Id">Id.</param>
        /// <param name="LastSync">LastSync.</param>
        /// <param name="LaunchDate">LaunchDate.</param>
        /// <param name="PauseEnd">PauseEnd.</param>
        /// <param name="PauseStart">PauseStart.</param>
        /// <param name="SisType">SisType.</param>
        /// <param name="State">State.</param>
        public DistrictStatus(string Error = default(string), string Id = default(string), string LastSync = default(string), string LaunchDate = default(string), string PauseEnd = default(string), string PauseStart = default(string), string SisType = default(string), StateEnum? State = default(StateEnum?))
        {
            this.Error = Error;
            this.Id = Id;
            this.LastSync = LastSync;
            this.LaunchDate = LaunchDate;
            this.PauseEnd = PauseEnd;
            this.PauseStart = PauseStart;
            this.SisType = SisType;
            this.State = State;
        }
        
        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public string Error { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets LastSync
        /// </summary>
        [DataMember(Name="last_sync", EmitDefaultValue=false)]
        public string LastSync { get; set; }

        /// <summary>
        /// Gets or Sets LaunchDate
        /// </summary>
        [DataMember(Name="launch_date", EmitDefaultValue=false)]
        public string LaunchDate { get; set; }

        /// <summary>
        /// Gets or Sets PauseEnd
        /// </summary>
        [DataMember(Name="pause_end", EmitDefaultValue=false)]
        public string PauseEnd { get; set; }

        /// <summary>
        /// Gets or Sets PauseStart
        /// </summary>
        [DataMember(Name="pause_start", EmitDefaultValue=false)]
        public string PauseStart { get; set; }

        /// <summary>
        /// Gets or Sets SisType
        /// </summary>
        [DataMember(Name="sis_type", EmitDefaultValue=false)]
        public string SisType { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DistrictStatus {\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastSync: ").Append(LastSync).Append("\n");
            sb.Append("  LaunchDate: ").Append(LaunchDate).Append("\n");
            sb.Append("  PauseEnd: ").Append(PauseEnd).Append("\n");
            sb.Append("  PauseStart: ").Append(PauseStart).Append("\n");
            sb.Append("  SisType: ").Append(SisType).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DistrictStatus);
        }

        /// <summary>
        /// Returns true if DistrictStatus instances are equal
        /// </summary>
        /// <param name="other">Instance of DistrictStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DistrictStatus other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Error == other.Error ||
                    this.Error != null &&
                    this.Error.Equals(other.Error)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.LastSync == other.LastSync ||
                    this.LastSync != null &&
                    this.LastSync.Equals(other.LastSync)
                ) && 
                (
                    this.LaunchDate == other.LaunchDate ||
                    this.LaunchDate != null &&
                    this.LaunchDate.Equals(other.LaunchDate)
                ) && 
                (
                    this.PauseEnd == other.PauseEnd ||
                    this.PauseEnd != null &&
                    this.PauseEnd.Equals(other.PauseEnd)
                ) && 
                (
                    this.PauseStart == other.PauseStart ||
                    this.PauseStart != null &&
                    this.PauseStart.Equals(other.PauseStart)
                ) && 
                (
                    this.SisType == other.SisType ||
                    this.SisType != null &&
                    this.SisType.Equals(other.SisType)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Error != null)
                    hash = hash * 59 + this.Error.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.LastSync != null)
                    hash = hash * 59 + this.LastSync.GetHashCode();
                if (this.LaunchDate != null)
                    hash = hash * 59 + this.LaunchDate.GetHashCode();
                if (this.PauseEnd != null)
                    hash = hash * 59 + this.PauseEnd.GetHashCode();
                if (this.PauseStart != null)
                    hash = hash * 59 + this.PauseStart.GetHashCode();
                if (this.SisType != null)
                    hash = hash * 59 + this.SisType.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
